
CBASIC_START
compiledBasic:
	call ZXHeapClear
	LD (runtimeSaveSP),SP
ZX_LINE_1:
; 		1.0  DEFFN t(a{00 00 02 00 00 },b{00 00 03 00 00 })=a+b
	JP ZX_FN_t_END
ZX_FN_t:
	LD DE,(ZXBASIC_VAR_fn_t_a)
	LD HL,(ZXBASIC_VAR_fn_t_b)
	ADD HL,DE
	RET
ZX_FN_t_END:
; 		1.1  DEFFN u(a{00 00 03 00 00 },b{00 00 03 00 00 })= FN t(a,a)+ FN t(b,b)
	JP ZX_FN_u_END
ZX_FN_u:
	LD HL,(ZXBASIC_VAR_fn_u_a)
	LD (ZXBASIC_VAR_fn_t_a),HL
	LD (ZXBASIC_VAR_fn_t_b),HL
	CALL ZX_FN_t
	PUSH HL
	LD HL,(ZXBASIC_VAR_fn_u_b)
	LD (ZXBASIC_VAR_fn_t_a),HL
	LD (ZXBASIC_VAR_fn_t_b),HL
	CALL ZX_FN_t
	POP DE
	ADD HL,DE
	RET
ZX_FN_u_END:
ZX_LINE_10:
; 10  REM float sec f1 ff1 f2 f3
ZX_LINE_15:
; 15  REM float af bf cf df
ZX_LINE_16:
; 16  REM int16 ai bi ci di
ZX_LINE_17:
; 17  LET af=123.4{87 76 cc cc cd }: LET bf=3.14{82 48 f5 c2 8f }: LET cf=5.0{00 00 05 00 00 }
; 		17.1  LET af=123.4{87 76 cc cc cd }
	LD HL,FLOAT_1	;123.4
	LD DE,ZXBASIC_VAR_af
	LD BC,5
	LDIR
; 		17.2  LET bf=3.14{82 48 f5 c2 8f }
	LD HL,FLOAT_2	;3.14
	LD DE,ZXBASIC_VAR_bf
	LD BC,5
	LDIR
; 		17.3  LET cf=5.0{00 00 05 00 00 }
	LD HL,FLOAT_3	;5.0
	LD DE,ZXBASIC_VAR_cf
	LD BC,5
	LDIR
ZX_LINE_18:
; 18  LET ai=123{00 00 7b 00 00 }: LET bi=3{00 00 03 00 00 }: LET ci=5{00 00 05 00 00 }
; 		18.1  LET ai=123{00 00 7b 00 00 }
	LD HL,123
	LD (ZXBASIC_VAR_ai),HL
; 		18.2  LET bi=3{00 00 03 00 00 }
	LD HL,3
	LD (ZXBASIC_VAR_bi),HL
; 		18.3  LET ci=5{00 00 05 00 00 }
	LD HL,5
	LD (ZXBASIC_VAR_ci),HL
ZX_LINE_19:
; 19  LET df=af+bf*cf
; 		19.1  LET df=af+bf*cf
	LD HL,ZXBASIC_VAR_af
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_bf
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_cf
	CALL runtimePushFloatVar
	RST $28
	DB $04	;MULT
; END CALC
	DB $0f	;ADD
	DB $38	;END CALC
	LD HL,ZXBASIC_VAR_df
	CALL runtimeStoreFloat
ZX_LINE_20:
; 20  LET di=ai+bi*ci
; 		20.1  LET di=ai+bi*ci
	LD HL,(ZXBASIC_VAR_ai)
	PUSH HL
	LD DE,(ZXBASIC_VAR_bi)
	LD HL,(ZXBASIC_VAR_ci)
	call runtimeMult16bit
	POP DE
	ADD HL,DE
	LD (ZXBASIC_VAR_di),HL
ZX_LINE_30:
; 30  LET df=af*af+bf*bf/cf
; 		30.1  LET df=af*af+bf*bf/cf
	LD HL,ZXBASIC_VAR_af
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_af
	CALL runtimePushFloatVar
	RST $28
	DB $04	;MULT
	DB $38	;END CALC
	LD HL,ZXBASIC_VAR_bf
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_bf
	CALL runtimePushFloatVar
	RST $28
	DB $04	;MULT
	DB $38	;END CALC
	LD HL,ZXBASIC_VAR_cf
	CALL runtimePushFloatVar
	RST $28
	DB $05	;DIV
; END CALC
	DB $0f	;ADD
	DB $38	;END CALC
	LD HL,ZXBASIC_VAR_df
	CALL runtimeStoreFloat
ZX_LINE_31:
; 31  LET di=ai*ai+bi*bi/ci
; 		31.1  LET di=ai*ai+bi*bi/ci
	LD DE,(ZXBASIC_VAR_ai)
	LD HL,(ZXBASIC_VAR_ai)
	call runtimeMult16bit
	PUSH HL
	LD DE,(ZXBASIC_VAR_bi)
	LD HL,(ZXBASIC_VAR_bi)
	call runtimeMult16bit
	LD DE,HL
	LD HL,(ZXBASIC_VAR_ci)
	call runtimeDiv16bit
	POP DE
	ADD HL,DE
	LD (ZXBASIC_VAR_di),HL
ZX_LINE_100:
; 100  PAPER 6 {00 00 06 00 00 }: INK 1{00 00 01 00 00 }
; 		100.1  PAPER 6 {00 00 06 00 00 }
	LD HL,6 
	CALL runtimePaper
; 		100.2  INK 1{00 00 01 00 00 }
	LD HL,1
	CALL runtimeInk
ZX_LINE_105:
; 105  CLS 
; 		105.1  CLS 
	CALL runtimeCls
ZX_LINE_106:
; 106  GOTO 3300{00 00 e4 0c 00 }
; 		106.1  GOTO 3300{00 00 e4 0c 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3300
ZX_LINE_110:
; 110  LET a$="1234"
; 		110.1  LET a$="1234"
	LD DE,STRING_0	;1234
	LD HL,ZXBASIC_VAR_a_string
	CALL runtimeStoreString
ZX_LINE_120:
; 120  PRINT a$(1{00 00 01 00 00 } TO 2{00 00 02 00 00 })
; 		120.1  PRINT a$(1{00 00 01 00 00 } TO 2{00 00 02 00 00 })
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,(ZXBASIC_VAR_a_string)
	PUSH HL
	LD DE,1
	LD HL,2
	POP BC
	CALL runtimeSubstring
	CALL runtimePrintString
	CALL runtimePrintNewline
	CALL ZXFreeTempCompact
ZX_LINE_130:
; 130  DIM b$(10{00 00 0a 00 00 })
; 		130.1  DIM b$(10{00 00 0a 00 00 })
ZX_LINE_135:
; 135  LET b$(1{00 00 01 00 00 })="Hallo"
; 		135.1  LET b$(1{00 00 01 00 00 })="Hallo"
	LD HL,1
	ADD HL,HL
	LD BC,HL
	LD DE,STRING_1	;Hallo
	LD HL,BC
	LD BC,ZXBASIC_VAR_b_string
	ADD HL,BC
	LD (HL),DE
ZX_LINE_140:
; 140  PRINT b$(1{00 00 01 00 00 })(2{00 00 02 00 00 } TO )(1{00 00 01 00 00 } TO )
; 		140.1  PRINT b$(1{00 00 01 00 00 })(2{00 00 02 00 00 } TO )(1{00 00 01 00 00 } TO )
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,1
	ADD HL,HL
	LD DE, ZXBASIC_VAR_b_string
	ADD HL,DE
	LD DE,(HL)
	PUSH DE
	LD DE,2
	LD HL,-1
	POP BC
	CALL runtimeSubstring
	PUSH HL
	LD DE,1
	LD HL,-1
	POP BC
	CALL runtimeSubstring
	CALL runtimePrintString
	CALL runtimePrintNewline
	CALL ZXFreeTempCompact
ZX_LINE_1000:
; 1000  GOSUB 3700{00 00 74 0e 00 }: LET x=1{00 00 01 00 00 }: LET y=21{00 00 15 00 00 }: LET dx=1{00 00 01 00 00 }: LET dy=1{00 00 01 00 00 }
; 		1000.1  GOSUB 3700{00 00 74 0e 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_3700:
; 		1000.2  LET x=1{00 00 01 00 00 }
	LD HL,1
	LD (ZXBASIC_VAR_x),HL
; 		1000.3  LET y=21{00 00 15 00 00 }
	LD HL,21
	LD (ZXBASIC_VAR_y),HL
; 		1000.4  LET dx=1{00 00 01 00 00 }
	LD HL,1
	LD (ZXBASIC_VAR_dx),HL
; 		1000.5  LET dy=1{00 00 01 00 00 }
	LD (ZXBASIC_VAR_dy),HL
ZX_LINE_1005:
; 1005  FOR i=1{00 00 01 00 00 } TO 5000{00 00 88 13 00 }
; 		1005.1  FOR i=1{00 00 01 00 00 } TO 5000{00 00 88 13 00 }
	CALL runtimeCheckBreak
	LD HL,1
	LD (ZXBASIC_VAR_i),HL
	LD HL,5000
	LD (ZXBASIC_VAR_for_i),HL
FOR_0:
ZX_LINE_1010:
; 1010  PLOT  OVER 1{00 00 01 00 00 }; INK 3{00 00 03 00 00 };x,y
; 		1010.1  PLOT  OVER 1{00 00 01 00 00 }; INK 3{00 00 03 00 00 };x,y
	LD HL,1
	CALL runtimeLocalOver
	LD HL,3
	CALL runtimeLocalInk
	LD DE,(ZXBASIC_VAR_x)
	LD HL,(ZXBASIC_VAR_y)
	CALL runtimePlot
ZX_LINE_1020:
; 1020  LET x=x+dx
; 		1020.1  LET x=x+dx
	LD DE,(ZXBASIC_VAR_x)
	LD HL,(ZXBASIC_VAR_dx)
	ADD HL,DE
	LD (ZXBASIC_VAR_x),HL
ZX_LINE_1030:
; 1030  LET y=y+dy
; 		1030.1  LET y=y+dy
	LD DE,(ZXBASIC_VAR_y)
	LD HL,(ZXBASIC_VAR_dy)
	ADD HL,DE
	LD (ZXBASIC_VAR_y),HL
ZX_LINE_1040:
; 1040  IF x <= 1{00 00 01 00 00 } ORX x >= 250{00 00 fa 00 00 } THEN  LET dx=0{00 00 00 00 00 }-dx
; 		1040.1  IF x <= 1{00 00 01 00 00 } ORX x >= 250{00 00 fa 00 00 } THEN  LET dx=0{00 00 00 00 00 }-dx
	LD DE,(ZXBASIC_VAR_x)
	LD HL,1
	SUB HL,DE
	LD HL,0
	call nc,HL1
	call z,HL1
	PUSH HL
	LD DE,(ZXBASIC_VAR_x)
	LD HL,250
	SUB HL,DE
	LD HL,0
	call c,HL1
	call z,HL1
	POP DE
	LD A,L
	OR E
	LD L,A
	LD H,0
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_1
; 		1040.2  LET dx=0{00 00 00 00 00 }-dx
	LD HL,0
	LD DE,(ZXBASIC_VAR_dx)
	SUB HL,DE
	LD (ZXBASIC_VAR_dx),HL
ZXB_LABEL_1:
ZX_LINE_1050:
; 1050  IF y <= 20{00 00 14 00 00 } ORX y >= 160{00 00 a0 00 00 } THEN  LET dy=0{00 00 00 00 00 }-dy
; 		1050.1  IF y <= 20{00 00 14 00 00 } ORX y >= 160{00 00 a0 00 00 } THEN  LET dy=0{00 00 00 00 00 }-dy
	LD DE,(ZXBASIC_VAR_y)
	LD HL,20
	SUB HL,DE
	LD HL,0
	call nc,HL1
	call z,HL1
	PUSH HL
	LD DE,(ZXBASIC_VAR_y)
	LD HL,160
	SUB HL,DE
	LD HL,0
	call c,HL1
	call z,HL1
	POP DE
	LD A,L
	OR E
	LD L,A
	LD H,0
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_2
; 		1050.2  LET dy=0{00 00 00 00 00 }-dy
	LD HL,0
	LD DE,(ZXBASIC_VAR_dy)
	SUB HL,DE
	LD (ZXBASIC_VAR_dy),HL
ZXB_LABEL_2:
ZX_LINE_1060:
; 1060  NEXT i
; 		1060.1  NEXT i
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_i)
	INC HL
	LD (ZXBASIC_VAR_i),HL
	LD DE,(ZXBASIC_VAR_for_i)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_0
ZX_LINE_1070:
; 1070  GOTO 3710{00 00 7e 0e 00 }
; 		1070.1  GOTO 3710{00 00 7e 0e 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3710
ZX_LINE_1100:
; 1100  GOSUB 3700{00 00 74 0e 00 }
; 		1100.1  GOSUB 3700{00 00 74 0e 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_3700:
ZX_LINE_1120:
; 1120  FOR i=0{00 00 00 00 00 } TO 255{00 00 ff 00 00 } STEP 3{00 00 03 00 00 }
; 		1120.1  FOR i=0{00 00 00 00 00 } TO 255{00 00 ff 00 00 } STEP 3{00 00 03 00 00 }
	CALL runtimeCheckBreak
	LD HL,0
	LD (ZXBASIC_VAR_i),HL
	LD HL,255
	LD (ZXBASIC_VAR_for_i),HL
	LD HL,3
	LD (ZXBASIC_VAR_for_i_step),HL
FOR_1:
ZX_LINE_1130:
; 1130  PLOT  INK 1{00 00 01 00 00 };i,0{00 00 00 00 00 }
; 		1130.1  PLOT  INK 1{00 00 01 00 00 };i,0{00 00 00 00 00 }
	LD HL,1
	CALL runtimeLocalInk
	LD DE,(ZXBASIC_VAR_i)
	LD HL,0
	CALL runtimePlot
ZX_LINE_1140:
; 1140  DRAW  INK 1{00 00 01 00 00 };255{00 00 ff 00 00 }-i,170{00 00 aa 00 00 }
; 		1140.1  DRAW  INK 1{00 00 01 00 00 };255{00 00 ff 00 00 }-i,170{00 00 aa 00 00 }
	LD HL,1
	CALL runtimeLocalInk
	LD HL,255
	LD DE,(ZXBASIC_VAR_i)
	SUB HL,DE
	LD DE,HL
	LD HL,170
	LD B,L
	LD C,E
	CALL runtimeDraw
ZX_LINE_1150:
; 1150  NEXT i
; 		1150.1  NEXT i
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_i)
	LD BC,(ZXBASIC_VAR_for_i_step)
	LD A,B
	ADD HL,BC
	LD (ZXBASIC_VAR_i),HL
	LD DE,(ZXBASIC_VAR_for_i)
	AND $80
	JR Z,FOR_1_1
	SUB HL,DE
	JP NC,FOR_1
	JR FOR_1_2
FOR_1_1:
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_1
FOR_1_2:
ZX_LINE_1155:
; 1155  RETURN 
; 		1155.1  RETURN 
	CALL runtimeCheckBreak
	RET
ZX_LINE_1160:
; 1160  FOR i=1{00 00 01 00 00 } TO 170{00 00 aa 00 00 } STEP 3{00 00 03 00 00 }
; 		1160.1  FOR i=1{00 00 01 00 00 } TO 170{00 00 aa 00 00 } STEP 3{00 00 03 00 00 }
	CALL runtimeCheckBreak
	LD HL,1
	LD (ZXBASIC_VAR_i),HL
	LD HL,170
	LD (ZXBASIC_VAR_for_i),HL
	LD HL,3
	LD (ZXBASIC_VAR_for_i_step),HL
FOR_2:
ZX_LINE_1170:
; 1170  PLOT  INK 2{00 00 02 00 00 };0{00 00 00 00 00 },i
; 		1170.1  PLOT  INK 2{00 00 02 00 00 };0{00 00 00 00 00 },i
	LD HL,2
	CALL runtimeLocalInk
	LD DE,0
	LD HL,(ZXBASIC_VAR_i)
	CALL runtimePlot
ZX_LINE_1180:
; 1180  DRAW  INK 2{00 00 02 00 00 };255{00 00 ff 00 00 },170{00 00 aa 00 00 }-i
; 		1180.1  DRAW  INK 2{00 00 02 00 00 };255{00 00 ff 00 00 },170{00 00 aa 00 00 }-i
	LD HL,2
	CALL runtimeLocalInk
	LD HL,255
	LD BC,HL
	LD HL,170
	LD DE,(ZXBASIC_VAR_i)
	SUB HL,DE
	LD DE,BC
	LD B,L
	LD C,E
	CALL runtimeDraw
ZX_LINE_1190:
; 1190  NEXT i
; 		1190.1  NEXT i
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_i)
	LD BC,(ZXBASIC_VAR_for_i_step)
	LD A,B
	ADD HL,BC
	LD (ZXBASIC_VAR_i),HL
	LD DE,(ZXBASIC_VAR_for_i)
	AND $80
	JR Z,FOR_2_1
	SUB HL,DE
	JP NC,FOR_2
	JR FOR_2_2
FOR_2_1:
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_2
FOR_2_2:
ZX_LINE_1195:
; 1195  RETURN 
; 		1195.1  RETURN 
	CALL runtimeCheckBreak
	RET
ZX_LINE_1200:
; 1200  REM Scroll left
ZX_LINE_1210:
; 1210  LET adr=16384{00 00 00 40 00 }
; 		1210.1  LET adr=16384{00 00 00 40 00 }
	LD HL,16384
	LD (ZXBASIC_VAR_adr),HL
ZX_LINE_1220:
; 1220  FOR l=1{00 00 01 00 00 } TO 192{00 00 c0 00 00 }
; 		1220.1  FOR l=1{00 00 01 00 00 } TO 192{00 00 c0 00 00 }
	CALL runtimeCheckBreak
	LD HL,1
	LD (ZXBASIC_VAR_l),HL
	LD HL,192
	LD (ZXBASIC_VAR_for_l),HL
FOR_3:
ZX_LINE_1225:
; 1225  LET adrl=adr
; 		1225.1  LET adrl=adr
	LD HL,(ZXBASIC_VAR_adr)
	LD (ZXBASIC_VAR_adrl),HL
ZX_LINE_1230:
; 1230  FOR p=0{00 00 00 00 00 } TO 30{00 00 1e 00 00 }
; 		1230.1  FOR p=0{00 00 00 00 00 } TO 30{00 00 1e 00 00 }
	CALL runtimeCheckBreak
	LD HL,0
	LD (ZXBASIC_VAR_p),HL
	LD HL,30
	LD (ZXBASIC_VAR_for_p),HL
FOR_4:
ZX_LINE_1240:
; 1240  POKE adrl, PEEK (adrl+1{00 00 01 00 00 })
; 		1240.1  POKE adrl, PEEK (adrl+1{00 00 01 00 00 })
	LD HL,(ZXBASIC_VAR_adrl)
	LD BC,HL
	LD DE,(ZXBASIC_VAR_adrl)
	LD HL,1
	ADD HL,DE
	LD L,(HL)
	LD H,0
	LD DE,BC
	EX HL,DE
	LD (HL),E
ZX_LINE_1241:
; 1241  LET adrl=adrl+1{00 00 01 00 00 }
; 		1241.1  LET adrl=adrl+1{00 00 01 00 00 }
	LD HL,(ZXBASIC_VAR_adrl)
	INC HL
	LD (ZXBASIC_VAR_adrl),HL
ZX_LINE_1250:
; 1250  NEXT p
; 		1250.1  NEXT p
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_p)
	INC HL
	LD (ZXBASIC_VAR_p),HL
	LD DE,(ZXBASIC_VAR_for_p)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_4
ZX_LINE_1260:
; 1260  POKE adr+31{00 00 1f 00 00 },0{00 00 00 00 00 }
; 		1260.1  POKE adr+31{00 00 1f 00 00 },0{00 00 00 00 00 }
	LD DE,(ZXBASIC_VAR_adr)
	LD HL,31
	ADD HL,DE
	LD DE,0
	LD (HL),E
ZX_LINE_1270:
; 1270  LET adr=adr+32{00 00 20 00 00 }
; 		1270.1  LET adr=adr+32{00 00 20 00 00 }
	LD DE,(ZXBASIC_VAR_adr)
	LD HL,32
	ADD HL,DE
	LD (ZXBASIC_VAR_adr),HL
ZX_LINE_1280:
; 1280  NEXT l
; 		1280.1  NEXT l
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_l)
	INC HL
	LD (ZXBASIC_VAR_l),HL
	LD DE,(ZXBASIC_VAR_for_l)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_3
ZX_LINE_1290:
; 1290  RETURN 
; 		1290.1  RETURN 
	CALL runtimeCheckBreak
	RET
ZX_LINE_1400:
; 1400  CLS : PRINT "Scroll in Assembler";
; 		1400.1  CLS 
	CALL runtimeCls
; 		1400.2  PRINT "Scroll in Assembler";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_2	;Scroll in Assembler
	CALL runtimePrintString
ZX_LINE_1410:
; 1410  GOSUB 1100{00 00 4c 04 00 }
; 		1410.1  GOSUB 1100{00 00 4c 04 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_1100:
ZX_LINE_1420:
; 1420  FOR i=1{00 00 01 00 00 } TO 32{00 00 20 00 00 }
; 		1420.1  FOR i=1{00 00 01 00 00 } TO 32{00 00 20 00 00 }
	CALL runtimeCheckBreak
	LD HL,1
	LD (ZXBASIC_VAR_i),HL
	LD HL,32
	LD (ZXBASIC_VAR_for_i),HL
FOR_5:
ZX_LINE_1430:
; 1430  REM asm call sidescroll
	 call sidescroll
ZX_LINE_1440:
; 1440  NEXT i
; 		1440.1  NEXT i
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_i)
	INC HL
	LD (ZXBASIC_VAR_i),HL
	LD DE,(ZXBASIC_VAR_for_i)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_5
ZX_LINE_1450:
; 1450  GOSUB 3600{00 00 10 0e 00 }
; 		1450.1  GOSUB 3600{00 00 10 0e 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_3600:
ZX_LINE_1460:
; 1460  RETURN 
; 		1460.1  RETURN 
	CALL runtimeCheckBreak
	RET
ZX_LINE_1470:
; 1470  REM asm include "demo.asm"
	 include "demo.asm"
ZX_LINE_3000:
; 3000  DATA 24{00 00 18 00 00 },60{00 00 3c 00 00 },126{00 00 7e 00 00 },219{00 00 db 00 00 },255{00 00 ff 00 00 },36{00 00 24 00 00 },90{00 00 5a 00 00 },165{00 00 a5 00 00 }
; 		3000.1  DATA 24{00 00 18 00 00 },60{00 00 3c 00 00 },126{00 00 7e 00 00 },219{00 00 db 00 00 },255{00 00 ff 00 00 },36{00 00 24 00 00 },90{00 00 5a 00 00 },165{00 00 a5 00 00 }
ZX_LINE_3010:
; 3010  DATA 60{00 00 3c 00 00 },66{00 00 42 00 00 },102{00 00 66 00 00 },153{00 00 99 00 00 },129{00 00 81 00 00 },90{00 00 5a 00 00 },66{00 00 42 00 00 },60{00 00 3c 00 00 }
; 		3010.1  DATA 60{00 00 3c 00 00 },66{00 00 42 00 00 },102{00 00 66 00 00 },153{00 00 99 00 00 },129{00 00 81 00 00 },90{00 00 5a 00 00 },66{00 00 42 00 00 },60{00 00 3c 00 00 }
ZX_LINE_3020:
; 3020  DATA 0{00 00 00 00 00 },0{00 00 00 00 00 },255{00 00 ff 00 00 },153{00 00 99 00 00 },255{00 00 ff 00 00 },129{00 00 81 00 00 },255{00 00 ff 00 00 },36{00 00 24 00 00 }
; 		3020.1  DATA 0{00 00 00 00 00 },0{00 00 00 00 00 },255{00 00 ff 00 00 },153{00 00 99 00 00 },255{00 00 ff 00 00 },129{00 00 81 00 00 },255{00 00 ff 00 00 },36{00 00 24 00 00 }
ZX_LINE_3100:
; 3100  LET pos= USR "A"
; 		3100.1  LET pos= USR "A"
	LD HL,STRING_3	;A
	CALL runtimeUsrUDG
	LD (ZXBASIC_VAR_pos),HL
ZX_LINE_3110:
; 3110  RESTORE 3000{00 00 b8 0b 00 }
; 		3110.1  RESTORE 3000{00 00 b8 0b 00 }
	LD HL,DATA_3000
	LD (DATAPTR),HL
ZX_LINE_3120:
; 3120  LET pos=65368{00 00 58 ff 00 }
; 		3120.1  LET pos=65368{00 00 58 ff 00 }
	LD HL,65368
	LD (ZXBASIC_VAR_pos),HL
ZX_LINE_3130:
; 3130  FOR i=1{00 00 01 00 00 } TO 3{00 00 03 00 00 }
; 		3130.1  FOR i=1{00 00 01 00 00 } TO 3{00 00 03 00 00 }
	CALL runtimeCheckBreak
	LD HL,1
	LD (ZXBASIC_VAR_i),HL
	LD HL,3
	LD (ZXBASIC_VAR_for_i),HL
FOR_6:
ZX_LINE_3140:
; 3140  FOR j=1{00 00 01 00 00 } TO 8{00 00 08 00 00 }
; 		3140.1  FOR j=1{00 00 01 00 00 } TO 8{00 00 08 00 00 }
	CALL runtimeCheckBreak
	LD HL,1
	LD (ZXBASIC_VAR_j),HL
	LD HL,8
	LD (ZXBASIC_VAR_for_j),HL
FOR_7:
ZX_LINE_3150:
; 3150  READ a
; 		3150.1  READ a
	LD HL,(DATAPTR)
	LD DE,(HL)
	INC HL
	INC HL
	LD (DATAPTR),HL
	LD (ZXBASIC_VAR_a),DE
ZX_LINE_3160:
; 3160  POKE pos,a
; 		3160.1  POKE pos,a
	LD HL,(ZXBASIC_VAR_pos)
	LD DE,(ZXBASIC_VAR_a)
	LD (HL),E
ZX_LINE_3170:
; 3170  LET pos=pos+1{00 00 01 00 00 }
; 		3170.1  LET pos=pos+1{00 00 01 00 00 }
	LD HL,(ZXBASIC_VAR_pos)
	INC HL
	LD (ZXBASIC_VAR_pos),HL
ZX_LINE_3180:
; 3180  NEXT j
; 		3180.1  NEXT j
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_j)
	INC HL
	LD (ZXBASIC_VAR_j),HL
	LD DE,(ZXBASIC_VAR_for_j)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_7
ZX_LINE_3190:
; 3190  NEXT i
; 		3190.1  NEXT i
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_i)
	INC HL
	LD (ZXBASIC_VAR_i),HL
	LD DE,(ZXBASIC_VAR_for_i)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_6
ZX_LINE_3200:
; 3200  PRINT  INK 1{00 00 01 00 00 }; AT 0{00 00 00 00 00 },0{00 00 00 00 00 };"UDG:";
; 		3200.1  PRINT  INK 1{00 00 01 00 00 }; AT 0{00 00 00 00 00 },0{00 00 00 00 00 };"UDG
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,1
	CALL runtimeLocalInk
	LD DE,0
	LD HL,0
	CALL runtimePrintAt
	LD HL,STRING_4	;UDG:\90\91\92
	CALL runtimePrintString
	LD A,(ZX_ATTR_P)
	LD (ZX_ATTR_T),A
ZX_LINE_3210:
; 3210  RETURN 
; 		3210.1  RETURN 
	CALL runtimeCheckBreak
	RET
ZX_LINE_3300:
; 3300  CLS 
; 		3300.1  CLS 
	CALL runtimeCls
ZX_LINE_3310:
; 3310  PRINT  AT 1{00 00 01 00 00 },0{00 00 00 00 00 };"Menu"
; 		3310.1  PRINT  AT 1{00 00 01 00 00 },0{00 00 00 00 00 };"Menu"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,1
	LD HL,0
	CALL runtimePrintAt
	LD HL,STRING_5	;Menu
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_3320:
; 3320  PRINT " 1 Plot"
; 		3320.1  PRINT " 1 Plot"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_6	; 1 Plot
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_3330:
; 3330  PRINT " 2 Array Test"
; 		3330.1  PRINT " 2 Array Test"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_7	; 2 Array Test
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_3340:
; 3340  PRINT " 3 Scroll in Basic"
; 		3340.1  PRINT " 3 Scroll in Basic"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_8	; 3 Scroll in Basic
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_3345:
; 3345  PRINT " 4 Data+UDG"
; 		3345.1  PRINT " 4 Data+UDG"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_9	; 4 Data+UDG
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_3350:
; 3350  PRINT " 5 Mult+Div"
; 		3350.1  PRINT " 5 Mult+Div"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_10	; 5 Mult+Div
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_3360:
; 3360  PRINT " 6 Strings"
; 		3360.1  PRINT " 6 Strings"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_11	; 6 Strings
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_3365:
; 3365  PRINT " 7 Float"
; 		3365.1  PRINT " 7 Float"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_12	; 7 Float
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_3366:
; 3366  PRINT " 8 SIN/COS"
; 		3366.1  PRINT " 8 SIN/COS"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_13	; 8 SIN/COS
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_3367:
; 3367  PRINT " 9 Mandelbrot"
; 		3367.1  PRINT " 9 Mandelbrot"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_14	; 9 Mandelbrot
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_3370:
; 3370  PRINT " 0 FOR TO STEP"
; 		3370.1  PRINT " 0 FOR TO STEP"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_15	; 0 FOR TO STEP
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_3375:
; 3375  PRINT " A Input"
; 		3375.1  PRINT " A Input"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_16	; A Input
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_3376:
; 3376  PRINT " B String to Float"
; 		3376.1  PRINT " B String to Float"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_17	; B String to Float
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_3377:
; 3377  PRINT " C Beep and Border"
; 		3377.1  PRINT " C Beep and Border"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_18	; C Beep and Border
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_3378:
; 3378  PRINT " D RND"
; 		3378.1  PRINT " D RND"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_19	; D RND
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_3379:
; 3379  PRINT " E Vergleiche"
; 		3379.1  PRINT " E Vergleiche"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_20	; E Vergleiche
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_3380:
; 3380  PRINT " F DEF FN"
; 		3380.1  PRINT " F DEF FN"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_21	; F DEF FN
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_3390:
; 3390  PRINT  AT 4{00 00 04 00 00 },20{00 00 14 00 00 };"H Heapwalk";
; 		3390.1  PRINT  AT 4{00 00 04 00 00 },20{00 00 14 00 00 };"H Heapwalk";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,4
	LD HL,20
	CALL runtimePrintAt
	LD HL,STRING_22	;H Heapwalk
	CALL runtimePrintString
ZX_LINE_3400:
; 3400  LET k= CODE  INKEY 
; 		3400.1  LET k= CODE  INKEY 
	CALL runtimeInkey
	CALL runtimeCode
	LD (ZXBASIC_VAR_k),HL
	CALL ZXFreeTempCompact
ZX_LINE_3410:
; 3410  PRINT  AT 0{00 00 00 00 00 },20{00 00 14 00 00 };k;"  "
; 		3410.1  PRINT  AT 0{00 00 00 00 00 },20{00 00 14 00 00 };k;"  "
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,0
	LD HL,20
	CALL runtimePrintAt
	LD HL,(ZXBASIC_VAR_k)
	CALL runtimePrintInt
	LD HL,STRING_23	;  
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_3420:
; 3420  IF k=49{00 00 31 00 00 } THEN  CLS : PRINT "Zeichne 5000 Punkte": GOSUB 1000{00 00 e8 03 00 }: GOTO 3300{00 00 e4 0c 00 }
; 		3420.1  IF k=49{00 00 31 00 00 } THEN  CLS 
	LD DE,(ZXBASIC_VAR_k)
	LD HL,49
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_3
; 		3420.2  CLS 
	CALL runtimeCls
; 		3420.3  PRINT "Zeichne 5000 Punkte"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_24	;Zeichne 5000 Punkte
	CALL runtimePrintString
	CALL runtimePrintNewline
; 		3420.4  GOSUB 1000{00 00 e8 03 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_1000:
; 		3420.5  GOTO 3300{00 00 e4 0c 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3300
ZXB_LABEL_3:
ZX_LINE_3425:
; 3425  IF k=50{00 00 32 00 00 } THEN  CLS : GOSUB 4000{00 00 a0 0f 00 }: GOSUB 3600{00 00 10 0e 00 }: GOTO 3300{00 00 e4 0c 00 }
; 		3425.1  IF k=50{00 00 32 00 00 } THEN  CLS 
	LD DE,(ZXBASIC_VAR_k)
	LD HL,50
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_4
; 		3425.2  CLS 
	CALL runtimeCls
; 		3425.3  GOSUB 4000{00 00 a0 0f 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_4000:
; 		3425.4  GOSUB 3600{00 00 10 0e 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_3600:
; 		3425.5  GOTO 3300{00 00 e4 0c 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3300
ZXB_LABEL_4:
ZX_LINE_3430:
; 3430  IF k=51{00 00 33 00 00 } THEN  CLS : PRINT "Screen Scroll": PRINT "in Basic": GOSUB 1100{00 00 4c 04 00 }: FOR i=1{00 00 01 00 00 } TO 32{00 00 20 00 00 }: GOSUB 1200{00 00 b0 04 00 }: NEXT i: GOSUB 3600{00 00 10 0e 00 }: GOSUB 1400{00 00 78 05 00 }: GOTO 3300{00 00 e4 0c 00 }
; 		3430.1  IF k=51{00 00 33 00 00 } THEN  CLS 
	LD DE,(ZXBASIC_VAR_k)
	LD HL,51
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_5
; 		3430.2  CLS 
	CALL runtimeCls
; 		3430.3  PRINT "Screen Scroll"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_25	;Screen Scroll
	CALL runtimePrintString
	CALL runtimePrintNewline
; 		3430.4  PRINT "in Basic"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_26	;in Basic
	CALL runtimePrintString
	CALL runtimePrintNewline
; 		3430.5  GOSUB 1100{00 00 4c 04 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_1100:
; 		3430.6  FOR i=1{00 00 01 00 00 } TO 32{00 00 20 00 00 }
	CALL runtimeCheckBreak
	LD HL,1
	LD (ZXBASIC_VAR_i),HL
	LD HL,32
	LD (ZXBASIC_VAR_for_i),HL
FOR_8:
; 		3430.7  GOSUB 1200{00 00 b0 04 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_1200:
; 		3430.8  NEXT i
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_i)
	INC HL
	LD (ZXBASIC_VAR_i),HL
	LD DE,(ZXBASIC_VAR_for_i)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_8
; 		3430.9  GOSUB 3600{00 00 10 0e 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_3600:
; 		3430.10  GOSUB 1400{00 00 78 05 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_1400:
; 		3430.11  GOTO 3300{00 00 e4 0c 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3300
ZXB_LABEL_5:
ZX_LINE_3440:
; 3440  IF k=52{00 00 34 00 00 } THEN  CLS : GOSUB 3000{00 00 b8 0b 00 }: GOSUB 3600{00 00 10 0e 00 }: GOTO 3300{00 00 e4 0c 00 }
; 		3440.1  IF k=52{00 00 34 00 00 } THEN  CLS 
	LD DE,(ZXBASIC_VAR_k)
	LD HL,52
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_6
; 		3440.2  CLS 
	CALL runtimeCls
; 		3440.3  GOSUB 3000{00 00 b8 0b 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_3000:
; 		3440.4  GOSUB 3600{00 00 10 0e 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_3600:
; 		3440.5  GOTO 3300{00 00 e4 0c 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3300
ZXB_LABEL_6:
ZX_LINE_3450:
; 3450  IF k=53{00 00 35 00 00 } THEN  GOSUB 4200{00 00 68 10 00 }: GOTO 3300{00 00 e4 0c 00 }
; 		3450.1  IF k=53{00 00 35 00 00 } THEN  GOSUB 4200{00 00 68 10 00 }
	LD DE,(ZXBASIC_VAR_k)
	LD HL,53
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_7
; 		3450.2  GOSUB 4200{00 00 68 10 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_4200:
; 		3450.3  GOTO 3300{00 00 e4 0c 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3300
ZXB_LABEL_7:
ZX_LINE_3460:
; 3460  IF k=54{00 00 36 00 00 } THEN  GOSUB 4300{00 00 cc 10 00 }: GOTO 3300{00 00 e4 0c 00 }
; 		3460.1  IF k=54{00 00 36 00 00 } THEN  GOSUB 4300{00 00 cc 10 00 }
	LD DE,(ZXBASIC_VAR_k)
	LD HL,54
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_8
; 		3460.2  GOSUB 4300{00 00 cc 10 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_4300:
; 		3460.3  GOTO 3300{00 00 e4 0c 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3300
ZXB_LABEL_8:
ZX_LINE_3465:
; 3465  IF k=55{00 00 37 00 00 } THEN  GOSUB 4500{00 00 94 11 00 }: GOTO 3300{00 00 e4 0c 00 }
; 		3465.1  IF k=55{00 00 37 00 00 } THEN  GOSUB 4500{00 00 94 11 00 }
	LD DE,(ZXBASIC_VAR_k)
	LD HL,55
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_9
; 		3465.2  GOSUB 4500{00 00 94 11 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_4500:
; 		3465.3  GOTO 3300{00 00 e4 0c 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3300
ZXB_LABEL_9:
ZX_LINE_3470:
; 3470  IF k=56{00 00 38 00 00 } THEN  GOSUB 4800{00 00 c0 12 00 }: GOTO 3300{00 00 e4 0c 00 }
; 		3470.1  IF k=56{00 00 38 00 00 } THEN  GOSUB 4800{00 00 c0 12 00 }
	LD DE,(ZXBASIC_VAR_k)
	LD HL,56
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_10
; 		3470.2  GOSUB 4800{00 00 c0 12 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_4800:
; 		3470.3  GOTO 3300{00 00 e4 0c 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3300
ZXB_LABEL_10:
ZX_LINE_3480:
; 3480  IF k=57{00 00 39 00 00 } THEN  GOSUB 5000{00 00 88 13 00 }: GOTO 3300{00 00 e4 0c 00 }
; 		3480.1  IF k=57{00 00 39 00 00 } THEN  GOSUB 5000{00 00 88 13 00 }
	LD DE,(ZXBASIC_VAR_k)
	LD HL,57
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_11
; 		3480.2  GOSUB 5000{00 00 88 13 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_5000:
; 		3480.3  GOTO 3300{00 00 e4 0c 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3300
ZXB_LABEL_11:
ZX_LINE_3485:
; 3485  IF k=48{00 00 30 00 00 } THEN  GOSUB 5200{00 00 50 14 00 }: GOTO 3300{00 00 e4 0c 00 }
; 		3485.1  IF k=48{00 00 30 00 00 } THEN  GOSUB 5200{00 00 50 14 00 }
	LD DE,(ZXBASIC_VAR_k)
	LD HL,48
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_12
; 		3485.2  GOSUB 5200{00 00 50 14 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_5200:
; 		3485.3  GOTO 3300{00 00 e4 0c 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3300
ZXB_LABEL_12:
ZX_LINE_3486:
; 3486  IF k=104{00 00 68 00 00 } ORX k=72{00 00 48 00 00 } THEN  GOSUB 5300{00 00 b4 14 00 }: GOTO 3300{00 00 e4 0c 00 }
; 		3486.1  IF k=104{00 00 68 00 00 } ORX k=72{00 00 48 00 00 } THEN  GOSUB 5300{00 00 b4 14 00 }
	LD DE,(ZXBASIC_VAR_k)
	LD HL,104
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	PUSH HL
	LD DE,(ZXBASIC_VAR_k)
	LD HL,72
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	POP DE
	LD A,L
	OR E
	LD L,A
	LD H,0
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_13
; 		3486.2  GOSUB 5300{00 00 b4 14 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_5300:
; 		3486.3  GOTO 3300{00 00 e4 0c 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3300
ZXB_LABEL_13:
ZX_LINE_3487:
; 3487  IF k=97{00 00 61 00 00 } ORX k=65{00 00 41 00 00 } THEN  GOSUB 5500{00 00 7c 15 00 }: GOTO 3300{00 00 e4 0c 00 }
; 		3487.1  IF k=97{00 00 61 00 00 } ORX k=65{00 00 41 00 00 } THEN  GOSUB 5500{00 00 7c 15 00 }
	LD DE,(ZXBASIC_VAR_k)
	LD HL,97
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	PUSH HL
	LD DE,(ZXBASIC_VAR_k)
	LD HL,65
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	POP DE
	LD A,L
	OR E
	LD L,A
	LD H,0
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_14
; 		3487.2  GOSUB 5500{00 00 7c 15 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_5500:
; 		3487.3  GOTO 3300{00 00 e4 0c 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3300
ZXB_LABEL_14:
ZX_LINE_3488:
; 3488  IF k=98{00 00 62 00 00 } ORX k=66{00 00 42 00 00 } THEN  GOSUB 5600{00 00 e0 15 00 }: GOTO 3300{00 00 e4 0c 00 }
; 		3488.1  IF k=98{00 00 62 00 00 } ORX k=66{00 00 42 00 00 } THEN  GOSUB 5600{00 00 e0 15 00 }
	LD DE,(ZXBASIC_VAR_k)
	LD HL,98
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	PUSH HL
	LD DE,(ZXBASIC_VAR_k)
	LD HL,66
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	POP DE
	LD A,L
	OR E
	LD L,A
	LD H,0
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_15
; 		3488.2  GOSUB 5600{00 00 e0 15 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_5600:
; 		3488.3  GOTO 3300{00 00 e4 0c 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3300
ZXB_LABEL_15:
ZX_LINE_3489:
; 3489  IF k=99{00 00 63 00 00 } ORX k=67{00 00 43 00 00 } THEN  GOSUB 5900{00 00 0c 17 00 }: GOTO 3300{00 00 e4 0c 00 }
; 		3489.1  IF k=99{00 00 63 00 00 } ORX k=67{00 00 43 00 00 } THEN  GOSUB 5900{00 00 0c 17 00 }
	LD DE,(ZXBASIC_VAR_k)
	LD HL,99
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	PUSH HL
	LD DE,(ZXBASIC_VAR_k)
	LD HL,67
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	POP DE
	LD A,L
	OR E
	LD L,A
	LD H,0
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_16
; 		3489.2  GOSUB 5900{00 00 0c 17 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_5900:
; 		3489.3  GOTO 3300{00 00 e4 0c 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3300
ZXB_LABEL_16:
ZX_LINE_3490:
; 3490  IF k=100{00 00 64 00 00 } ORX k=68{00 00 44 00 00 } THEN  GOSUB 6000{00 00 70 17 00 }: GOTO 3300{00 00 e4 0c 00 }
; 		3490.1  IF k=100{00 00 64 00 00 } ORX k=68{00 00 44 00 00 } THEN  GOSUB 6000{00 00 70 17 00 }
	LD DE,(ZXBASIC_VAR_k)
	LD HL,100
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	PUSH HL
	LD DE,(ZXBASIC_VAR_k)
	LD HL,68
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	POP DE
	LD A,L
	OR E
	LD L,A
	LD H,0
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_17
; 		3490.2  GOSUB 6000{00 00 70 17 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_6000:
; 		3490.3  GOTO 3300{00 00 e4 0c 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3300
ZXB_LABEL_17:
ZX_LINE_3491:
; 3491  IF k= CODE "e" ORX k= CODE "E" THEN  GOSUB 6100{00 00 d4 17 00 }: GOTO 3300{00 00 e4 0c 00 }
; 		3491.1  IF k= CODE "e" ORX k= CODE "E" THEN  GOSUB 6100{00 00 d4 17 00 }
	LD HL,(ZXBASIC_VAR_k)
	PUSH HL
	LD HL,STRING_27	;e
	CALL runtimeCode
	POP DE
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	PUSH HL
	LD HL,(ZXBASIC_VAR_k)
	PUSH HL
	LD HL,STRING_28	;E
	CALL runtimeCode
	POP DE
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	POP DE
	LD A,L
	OR E
	LD L,A
	LD H,0
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_18
; 		3491.2  GOSUB 6100{00 00 d4 17 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_6100:
; 		3491.3  GOTO 3300{00 00 e4 0c 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3300
ZXB_LABEL_18:
ZX_LINE_3492:
; 3492  IF k= CODE "f" ORX k= CODE "F" THEN  GOSUB 7000{00 00 58 1b 00 }: GOTO 3300{00 00 e4 0c 00 }
; 		3492.1  IF k= CODE "f" ORX k= CODE "F" THEN  GOSUB 7000{00 00 58 1b 00 }
	LD HL,(ZXBASIC_VAR_k)
	PUSH HL
	LD HL,STRING_29	;f
	CALL runtimeCode
	POP DE
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	PUSH HL
	LD HL,(ZXBASIC_VAR_k)
	PUSH HL
	LD HL,STRING_30	;F
	CALL runtimeCode
	POP DE
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	POP DE
	LD A,L
	OR E
	LD L,A
	LD H,0
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_19
; 		3492.2  GOSUB 7000{00 00 58 1b 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_7000:
; 		3492.3  GOTO 3300{00 00 e4 0c 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3300
ZXB_LABEL_19:
ZX_LINE_3499:
; 3499  GOTO 3400{00 00 48 0d 00 }
; 		3499.1  GOTO 3400{00 00 48 0d 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3400
ZX_LINE_3600:
; 3600  REM Press Key to continue
ZX_LINE_3610:
; 3610  PRINT  AT 21{00 00 15 00 00 },0{00 00 00 00 00 };"Weiter mit Tastendruck";
; 		3610.1  PRINT  AT 21{00 00 15 00 00 },0{00 00 00 00 00 };"Weiter mit Tastendruck";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,21
	LD HL,0
	CALL runtimePrintAt
	LD HL,STRING_31	;Weiter mit Tastendruck
	CALL runtimePrintString
ZX_LINE_3620:
; 3620  LET k= CODE  INKEY 
; 		3620.1  LET k= CODE  INKEY 
	CALL runtimeInkey
	CALL runtimeCode
	LD (ZXBASIC_VAR_k),HL
	CALL ZXFreeTempCompact
ZX_LINE_3630:
; 3630  IF k=0{00 00 00 00 00 } THEN  GOTO 3620{00 00 24 0e 00 }
; 		3630.1  IF k=0{00 00 00 00 00 } THEN  GOTO 3620{00 00 24 0e 00 }
	LD DE,(ZXBASIC_VAR_k)
	LD HL,0
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_20
; 		3630.2  GOTO 3620{00 00 24 0e 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3620
ZXB_LABEL_20:
ZX_LINE_3640:
; 3640  PAUSE 0{00 00 00 00 00 }
; 		3640.1  PAUSE 0{00 00 00 00 00 }
	LD HL,0
	CALL runtimePause
ZX_LINE_3650:
; 3650  RETURN 
; 		3650.1  RETURN 
	CALL runtimeCheckBreak
	RET
ZX_LINE_3700:
; 3700  POKE 23672{00 00 78 5c 00 },0{00 00 00 00 00 }: POKE 23673{00 00 79 5c 00 },0{00 00 00 00 00 }: POKE 23674{00 00 7a 5c 00 },0{00 00 00 00 00 }: RETURN 
; 		3700.1  POKE 23672{00 00 78 5c 00 },0{00 00 00 00 00 }
	LD HL,23672
	LD DE,0
	LD (HL),E
; 		3700.2  POKE 23673{00 00 79 5c 00 },0{00 00 00 00 00 }
	LD HL,23673
	LD DE,0
	LD (HL),E
; 		3700.3  POKE 23674{00 00 7a 5c 00 },0{00 00 00 00 00 }
	LD HL,23674
	LD DE,0
	LD (HL),E
; 		3700.4  RETURN 
	CALL runtimeCheckBreak
	RET
ZX_LINE_3710:
; 3710  LET ticks= PEEK 23672{00 00 78 5c 00 }+ PEEK 23673{00 00 79 5c 00 }*256{00 00 00 01 00 }: LET tsec= INT (ticks/50{00 00 32 00 00 }): LET min= INT (tsec/60{00 00 3c 00 00 }): LET sec=tsec-min*60{00 00 3c 00 00 }
; 		3710.1  LET ticks= PEEK 23672{00 00 78 5c 00 }+ PEEK 23673{00 00 79 5c 00 }*256{00 00 00 01 00 }
	LD A,(23672)
	LD L,A
	LD H,0
	LD BC,HL
	LD A,(23673)
	LD H,A
	LD L,0
	LD DE,BC
	ADD HL,DE
	LD (ZXBASIC_VAR_ticks),HL
; 		3710.2  LET tsec= INT (ticks/50{00 00 32 00 00 })
	LD DE,(ZXBASIC_VAR_ticks)
	LD HL,50
	call runtimeDiv16bit
	LD (ZXBASIC_VAR_tsec),HL
; 		3710.3  LET min= INT (tsec/60{00 00 3c 00 00 })
	LD DE,(ZXBASIC_VAR_tsec)
	LD HL,60
	call runtimeDiv16bit
	LD (ZXBASIC_VAR_min),HL
; 		3710.4  LET sec=tsec-min*60{00 00 3c 00 00 }
	LD HL,(ZXBASIC_VAR_tsec)
	PUSH HL
	LD DE,(ZXBASIC_VAR_min)
	LD HL,60
	call runtimeMult16bit
	POP DE
	EX HL,DE
	SUB HL,DE
	CALL runtimeIntToFloat
	LD HL,ZXBASIC_VAR_sec
	CALL runtimeStoreFloat
ZX_LINE_3720:
; 3720  PRINT  AT 21{00 00 15 00 00 },0{00 00 00 00 00 };ticks;" ticks ";min;":";sec;" Press a key";
; 		3720.1  PRINT  AT 21{00 00 15 00 00 },0{00 00 00 00 00 };ticks;" ticks ";min;"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,21
	LD HL,0
	CALL runtimePrintAt
	LD HL,(ZXBASIC_VAR_ticks)
	CALL runtimePrintInt
	LD HL,STRING_32	; ticks 
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_min)
	CALL runtimePrintInt
	LD HL,STRING_33	;:
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_sec
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	LD HL,STRING_34	; Press a key
	CALL runtimePrintString
ZX_LINE_3730:
; 3730  PAUSE 0{00 00 00 00 00 }: RETURN 
; 		3730.1  PAUSE 0{00 00 00 00 00 }
	LD HL,0
	CALL runtimePause
; 		3730.2  RETURN 
	CALL runtimeCheckBreak
	RET
ZX_LINE_3740:
; 3740  PRINT  AT 0{00 00 00 00 00 },0{00 00 00 00 00 }; PEEK 23672{00 00 78 5c 00 };" "; PEEK 23673{00 00 79 5c 00 };" "; PEEK 23674{00 00 7a 5c 00 };" ";: GOTO 3740{00 00 9c 0e 00 }
; 		3740.1  PRINT  AT 0{00 00 00 00 00 },0{00 00 00 00 00 }; PEEK 23672{00 00 78 5c 00 };" "; PEEK 23673{00 00 79 5c 00 };" "; PEEK 23674{00 00 7a 5c 00 };" ";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,0
	LD HL,0
	CALL runtimePrintAt
	LD A,(23672)
	LD L,A
	LD H,0
	CALL runtimePrintInt
	LD HL,STRING_35	; 
	CALL runtimePrintString
	LD A,(23673)
	LD L,A
	LD H,0
	CALL runtimePrintInt
	LD HL,STRING_35	; 
	CALL runtimePrintString
	LD A,(23674)
	LD L,A
	LD H,0
	CALL runtimePrintInt
	LD HL,STRING_35	; 
	CALL runtimePrintString
; 		3740.2  GOTO 3740{00 00 9c 0e 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3740
ZX_LINE_4000:
; 4000  DIM a(8{00 00 08 00 00 },8{00 00 08 00 00 })
; 		4000.1  DIM a(8{00 00 08 00 00 },8{00 00 08 00 00 })
ZX_LINE_4010:
; 4010  LET x=1{00 00 01 00 00 }
; 		4010.1  LET x=1{00 00 01 00 00 }
	LD HL,1
	LD (ZXBASIC_VAR_x),HL
ZX_LINE_4020:
; 4020  FOR i=1{00 00 01 00 00 } TO 8{00 00 08 00 00 }
; 		4020.1  FOR i=1{00 00 01 00 00 } TO 8{00 00 08 00 00 }
	CALL runtimeCheckBreak
	LD HL,1
	LD (ZXBASIC_VAR_i),HL
	LD HL,8
	LD (ZXBASIC_VAR_for_i),HL
FOR_9:
ZX_LINE_4030:
; 4030  FOR j=1{00 00 01 00 00 } TO 8{00 00 08 00 00 }
; 		4030.1  FOR j=1{00 00 01 00 00 } TO 8{00 00 08 00 00 }
	CALL runtimeCheckBreak
	LD HL,1
	LD (ZXBASIC_VAR_j),HL
	LD HL,8
	LD (ZXBASIC_VAR_for_j),HL
FOR_10:
ZX_LINE_4040:
; 4040  LET a(i,j)=x: LET x=x+1{00 00 01 00 00 }
; 		4040.1  LET a(i,j)=x
	LD HL,(ZXBASIC_VAR_i)
	ADD HL,HL
	ADD HL,HL
	ADD HL,HL
	LD DE,HL
	LD HL,(ZXBASIC_VAR_j)
	ADD HL,DE
	ADD HL,HL
	LD BC,HL
	LD DE,(ZXBASIC_VAR_x)
	LD HL,BC
	LD BC,ZXBASIC_VAR_a
	ADD HL,BC
	LD (HL),DE
; 		4040.2  LET x=x+1{00 00 01 00 00 }
	LD HL,(ZXBASIC_VAR_x)
	INC HL
	LD (ZXBASIC_VAR_x),HL
ZX_LINE_4050:
; 4050  NEXT j
; 		4050.1  NEXT j
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_j)
	INC HL
	LD (ZXBASIC_VAR_j),HL
	LD DE,(ZXBASIC_VAR_for_j)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_10
ZX_LINE_4060:
; 4060  NEXT i
; 		4060.1  NEXT i
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_i)
	INC HL
	LD (ZXBASIC_VAR_i),HL
	LD DE,(ZXBASIC_VAR_for_i)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_9
ZX_LINE_4070:
; 4070  FOR i=1{00 00 01 00 00 } TO 8{00 00 08 00 00 }
; 		4070.1  FOR i=1{00 00 01 00 00 } TO 8{00 00 08 00 00 }
	CALL runtimeCheckBreak
	LD HL,1
	LD (ZXBASIC_VAR_i),HL
	LD HL,8
	LD (ZXBASIC_VAR_for_i),HL
FOR_11:
ZX_LINE_4075:
; 4075  PRINT "Zeile ";i
; 		4075.1  PRINT "Zeile ";i
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_36	;Zeile 
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_i)
	CALL runtimePrintInt
	CALL runtimePrintNewline
ZX_LINE_4080:
; 4080  FOR j=1{00 00 01 00 00 } TO 8{00 00 08 00 00 }
; 		4080.1  FOR j=1{00 00 01 00 00 } TO 8{00 00 08 00 00 }
	CALL runtimeCheckBreak
	LD HL,1
	LD (ZXBASIC_VAR_j),HL
	LD HL,8
	LD (ZXBASIC_VAR_for_j),HL
FOR_12:
ZX_LINE_4090:
; 4090  PRINT " ";a(i,j);
; 		4090.1  PRINT " ";a(i,j);
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_35	; 
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_i)
	ADD HL,HL
	ADD HL,HL
	ADD HL,HL
	LD DE,HL
	LD HL,(ZXBASIC_VAR_j)
	ADD HL,DE
	ADD HL,HL
	LD DE, ZXBASIC_VAR_a
	ADD HL,DE
	LD DE,(HL)
	PUSH DE
	POP HL
	CALL runtimePrintInt
ZX_LINE_4100:
; 4100  NEXT j
; 		4100.1  NEXT j
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_j)
	INC HL
	LD (ZXBASIC_VAR_j),HL
	LD DE,(ZXBASIC_VAR_for_j)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_12
ZX_LINE_4110:
; 4110  PRINT 
; 		4110.1  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
ZX_LINE_4120:
; 4120  NEXT i
; 		4120.1  NEXT i
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_i)
	INC HL
	LD (ZXBASIC_VAR_i),HL
	LD DE,(ZXBASIC_VAR_for_i)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_11
ZX_LINE_4130:
; 4130  RETURN 
; 		4130.1  RETURN 
	CALL runtimeCheckBreak
	RET
ZX_LINE_4200:
; 4200  REM Mal und Durch
ZX_LINE_4210:
; 4210  CLS : PRINT  AT 0{00 00 00 00 00 },0{00 00 00 00 00 };"Multiplizieren, Dividieren"
; 		4210.1  CLS 
	CALL runtimeCls
; 		4210.2  PRINT  AT 0{00 00 00 00 00 },0{00 00 00 00 00 };"Multiplizieren, Dividieren"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,0
	LD HL,0
	CALL runtimePrintAt
	LD HL,STRING_37	;Multiplizieren, Dividieren
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_4220:
; 4220  FOR i=2{00 00 02 00 00 } TO 9{00 00 09 00 00 }
; 		4220.1  FOR i=2{00 00 02 00 00 } TO 9{00 00 09 00 00 }
	CALL runtimeCheckBreak
	LD HL,2
	LD (ZXBASIC_VAR_i),HL
	LD HL,9
	LD (ZXBASIC_VAR_for_i),HL
FOR_13:
ZX_LINE_4224:
; 4224  IF i>2{00 00 02 00 00 } THEN  PRINT 
; 		4224.1  IF i>2{00 00 02 00 00 } THEN  PRINT 
	LD DE,(ZXBASIC_VAR_i)
	LD HL,2
	SUB HL,DE
	LD HL,0
	call c,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_21
; 		4224.2  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
ZXB_LABEL_21:
ZX_LINE_4225:
; 4225  PRINT "x*";i;"=";
; 		4225.1  PRINT "x*";i;"=";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_38	;x*
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_i)
	CALL runtimePrintInt
	LD HL,STRING_39	;=
	CALL runtimePrintString
ZX_LINE_4230:
; 4230  FOR j=2{00 00 02 00 00 } TO 9{00 00 09 00 00 }
; 		4230.1  FOR j=2{00 00 02 00 00 } TO 9{00 00 09 00 00 }
	CALL runtimeCheckBreak
	LD HL,2
	LD (ZXBASIC_VAR_j),HL
	LD HL,9
	LD (ZXBASIC_VAR_for_j),HL
FOR_14:
ZX_LINE_4240:
; 4240  PRINT i*j;" ";
; 		4240.1  PRINT i*j;" ";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,(ZXBASIC_VAR_i)
	LD HL,(ZXBASIC_VAR_j)
	call runtimeMult16bit
	CALL runtimePrintInt
	LD HL,STRING_35	; 
	CALL runtimePrintString
ZX_LINE_4250:
; 4250  NEXT j
; 		4250.1  NEXT j
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_j)
	INC HL
	LD (ZXBASIC_VAR_j),HL
	LD DE,(ZXBASIC_VAR_for_j)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_14
ZX_LINE_4255:
; 4255  NEXT i
; 		4255.1  NEXT i
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_i)
	INC HL
	LD (ZXBASIC_VAR_i),HL
	LD DE,(ZXBASIC_VAR_for_i)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_13
ZX_LINE_4256:
; 4256  PRINT 
; 		4256.1  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
ZX_LINE_4257:
; 4257  PRINT "Mult/Div signed"
; 		4257.1  PRINT "Mult/Div signed"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_40	;Mult/Div signed
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_4270:
; 4270  LET z=30000{00 00 30 75 00 }: LET x=3{00 00 03 00 00 }
; 		4270.1  LET z=30000{00 00 30 75 00 }
	LD HL,30000
	LD (ZXBASIC_VAR_z),HL
; 		4270.2  LET x=3{00 00 03 00 00 }
	LD HL,3
	LD (ZXBASIC_VAR_x),HL
ZX_LINE_4280:
; 4280  FOR i=1{00 00 01 00 00 } TO 5{00 00 05 00 00 }: PRINT z,x: LET z=z/10{00 00 0a 00 00 }: LET x=x*10{00 00 0a 00 00 }: NEXT i
; 		4280.1  FOR i=1{00 00 01 00 00 } TO 5{00 00 05 00 00 }
	CALL runtimeCheckBreak
	LD HL,1
	LD (ZXBASIC_VAR_i),HL
	LD HL,5
	LD (ZXBASIC_VAR_for_i),HL
FOR_15:
; 		4280.2  PRINT z,x
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,(ZXBASIC_VAR_z)
	CALL runtimePrintInt
	CALL runtimePrintTab
	LD HL,(ZXBASIC_VAR_x)
	CALL runtimePrintInt
	CALL runtimePrintNewline
; 		4280.3  LET z=z/10{00 00 0a 00 00 }
	LD DE,(ZXBASIC_VAR_z)
	LD HL,10
	call runtimeDiv16bit
	LD (ZXBASIC_VAR_z),HL
; 		4280.4  LET x=x*10{00 00 0a 00 00 }
	LD DE,(ZXBASIC_VAR_x)
	LD HL,10
	call runtimeMult16bit
	LD (ZXBASIC_VAR_x),HL
; 		4280.5  NEXT i
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_i)
	INC HL
	LD (ZXBASIC_VAR_i),HL
	LD DE,(ZXBASIC_VAR_for_i)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_15
ZX_LINE_4285:
; 4285  LET z=0{00 00 00 00 00 }-30000{00 00 30 75 00 }: LET x=0{00 00 00 00 00 }-3{00 00 03 00 00 }
; 		4285.1  LET z=0{00 00 00 00 00 }-30000{00 00 30 75 00 }
	LD HL,0
	LD DE,30000
	SUB HL,DE
	LD (ZXBASIC_VAR_z),HL
; 		4285.2  LET x=0{00 00 00 00 00 }-3{00 00 03 00 00 }
	LD HL,0
	LD DE,3
	SUB HL,DE
	LD (ZXBASIC_VAR_x),HL
ZX_LINE_4286:
; 4286  FOR i=1{00 00 01 00 00 } TO 5{00 00 05 00 00 }: PRINT z,x: LET z=z/10{00 00 0a 00 00 }: LET x=x*10{00 00 0a 00 00 }: NEXT i
; 		4286.1  FOR i=1{00 00 01 00 00 } TO 5{00 00 05 00 00 }
	CALL runtimeCheckBreak
	LD HL,1
	LD (ZXBASIC_VAR_i),HL
	LD HL,5
	LD (ZXBASIC_VAR_for_i),HL
FOR_16:
; 		4286.2  PRINT z,x
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,(ZXBASIC_VAR_z)
	CALL runtimePrintInt
	CALL runtimePrintTab
	LD HL,(ZXBASIC_VAR_x)
	CALL runtimePrintInt
	CALL runtimePrintNewline
; 		4286.3  LET z=z/10{00 00 0a 00 00 }
	LD DE,(ZXBASIC_VAR_z)
	LD HL,10
	call runtimeDiv16bit
	LD (ZXBASIC_VAR_z),HL
; 		4286.4  LET x=x*10{00 00 0a 00 00 }
	LD DE,(ZXBASIC_VAR_x)
	LD HL,10
	call runtimeMult16bit
	LD (ZXBASIC_VAR_x),HL
; 		4286.5  NEXT i
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_i)
	INC HL
	LD (ZXBASIC_VAR_i),HL
	LD DE,(ZXBASIC_VAR_for_i)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_16
ZX_LINE_4290:
; 4290  GOSUB 3600{00 00 10 0e 00 }: RETURN 
; 		4290.1  GOSUB 3600{00 00 10 0e 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_3600:
; 		4290.2  RETURN 
	CALL runtimeCheckBreak
	RET
ZX_LINE_4300:
; 4300  REM Strings
ZX_LINE_4301:
; 4301  CLS 
; 		4301.1  CLS 
	CALL runtimeCls
ZX_LINE_4310:
; 4310  LET a$="1234"
; 		4310.1  LET a$="1234"
	LD DE,STRING_0	;1234
	LD HL,ZXBASIC_VAR_a_string
	CALL runtimeStoreString
ZX_LINE_4320:
; 4320  PRINT "a$=";a$
; 		4320.1  PRINT "a$=";a$
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_41	;a$=
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_a_string)
	CALL runtimePrintString
	CALL runtimePrintNewline
	CALL ZXFreeTempCompact
ZX_LINE_4330:
; 4330  PRINT "val a$="; VAL a$
; 		4330.1  PRINT "val a$="; VAL a$
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_42	;val a$=
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_a_string)
	CALL runtimeVal
	CALL runtimePrintFloat
	CALL runtimePrintNewline
	CALL ZXFreeTempCompact
ZX_LINE_4340:
; 4340  PRINT "start=";a$( TO 2{00 00 02 00 00 })
; 		4340.1  PRINT "start=";a$( TO 2{00 00 02 00 00 })
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_43	;start=
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_a_string)
	PUSH HL
	LD DE,1
	LD HL,2
	POP BC
	CALL runtimeSubstring
	CALL runtimePrintString
	CALL runtimePrintNewline
	CALL ZXFreeTempCompact
ZX_LINE_4350:
; 4350  PRINT "ende=";a$(2{00 00 02 00 00 } TO )
; 		4350.1  PRINT "ende=";a$(2{00 00 02 00 00 } TO )
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_44	;ende=
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_a_string)
	PUSH HL
	LD DE,2
	LD HL,-1
	POP BC
	CALL runtimeSubstring
	CALL runtimePrintString
	CALL runtimePrintNewline
	CALL ZXFreeTempCompact
ZX_LINE_4360:
; 4360  PRINT "mitte=";a$(1{00 00 01 00 00 } TO 2{00 00 02 00 00 })
; 		4360.1  PRINT "mitte=";a$(1{00 00 01 00 00 } TO 2{00 00 02 00 00 })
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_45	;mitte=
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_a_string)
	PUSH HL
	LD DE,1
	LD HL,2
	POP BC
	CALL runtimeSubstring
	CALL runtimePrintString
	CALL runtimePrintNewline
	CALL ZXFreeTempCompact
ZX_LINE_4370:
; 4370  PRINT "2.Byte=";a$(2{00 00 02 00 00 })
; 		4370.1  PRINT "2.Byte=";a$(2{00 00 02 00 00 })
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_46	;2.Byte=
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_a_string)
	PUSH HL
	LD HL,2
	POP BC
	CALL runtimeCharAt
	CALL runtimePrintString
	CALL runtimePrintNewline
	CALL ZXFreeTempCompact
ZX_LINE_4380:
; 4380  LET x$="": FOR i=32{00 00 20 00 00 } TO 255{00 00 ff 00 00 }: LET x$=x$+ CHR i: NEXT i: PRINT x$
; 		4380.1  LET x$=""
	LD DE,STRING_47	;
	LD HL,ZXBASIC_VAR_x_string
	CALL runtimeStoreString
; 		4380.2  FOR i=32{00 00 20 00 00 } TO 255{00 00 ff 00 00 }
	CALL runtimeCheckBreak
	LD HL,32
	LD (ZXBASIC_VAR_i),HL
	LD HL,255
	LD (ZXBASIC_VAR_for_i),HL
FOR_17:
; 		4380.3  LET x$=x$+ CHR i
	LD HL,(ZXBASIC_VAR_x_string)
	PUSH HL
	LD HL,(ZXBASIC_VAR_i)
	CALL runtimeChr
	POP DE
	CALL runtimeStringAdd
	LD DE,HL
	LD HL,ZXBASIC_VAR_x_string
	CALL runtimeStoreString
; 		4380.4  NEXT i
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_i)
	INC HL
	LD (ZXBASIC_VAR_i),HL
	LD DE,(ZXBASIC_VAR_for_i)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_17
; 		4380.5  PRINT x$
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,(ZXBASIC_VAR_x_string)
	CALL runtimePrintString
	CALL runtimePrintNewline
	CALL ZXFreeTempCompact
ZX_LINE_4499:
; 4499  GOSUB 3600{00 00 10 0e 00 }: RETURN 
; 		4499.1  GOSUB 3600{00 00 10 0e 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_3600:
; 		4499.2  RETURN 
	CALL runtimeCheckBreak
	RET
ZX_LINE_4500:
; 4500  CLS : PRINT "test float und float mit int"
; 		4500.1  CLS 
	CALL runtimeCls
; 		4500.2  PRINT "test float und float mit int"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_48	;test float und float mit int
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_4501:
; 4501  GOSUB 4600{00 00 f8 11 00 }
; 		4501.1  GOSUB 4600{00 00 f8 11 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_4600:
ZX_LINE_4503:
; 4503  PRINT "pi="; PI 
; 		4503.1  PRINT "pi="; PI 
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_49	;pi=
	CALL runtimePrintString
	CALL runtimePushPi
	CALL runtimePrintFloat
	CALL runtimePrintNewline
ZX_LINE_4504:
; 4504  LET pi= PI 
; 		4504.1  LET pi= PI 
	CALL runtimePushPi
	CALL runtimeFloatToInt
	LD (ZXBASIC_VAR_pi),HL
ZX_LINE_4505:
; 4505  PRINT "var pi=";pi
; 		4505.1  PRINT "var pi=";pi
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_50	;var pi=
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_pi)
	CALL runtimePrintInt
	CALL runtimePrintNewline
ZX_LINE_4507:
; 4507  LET zz=10.0{00 00 0a 00 00 }: PRINT "zz=";zz
; 		4507.1  LET zz=10.0{00 00 0a 00 00 }
	LD HL,FLOAT_4	;10.0
	CALL runtimePushFloatVar
	CALL runtimeFloatToInt
	LD (ZXBASIC_VAR_zz),HL
; 		4507.2  PRINT "zz=";zz
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_51	;zz=
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_zz)
	CALL runtimePrintInt
	CALL runtimePrintNewline
ZX_LINE_4510:
; 4510  LET f1=1{00 00 01 00 00 }: LET f2=7{00 00 07 00 00 }
; 		4510.1  LET f1=1{00 00 01 00 00 }
	LD HL,1
	CALL runtimeIntToFloat
	LD HL,ZXBASIC_VAR_f1
	CALL runtimeStoreFloat
; 		4510.2  LET f2=7{00 00 07 00 00 }
	LD HL,7
	CALL runtimeIntToFloat
	LD HL,ZXBASIC_VAR_f2
	CALL runtimeStoreFloat
ZX_LINE_4515:
; 4515  LET i1= INT f1: LET i2= INT f2
; 		4515.1  LET i1= INT f1
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	CALL runtimeFloatToInt
	LD (ZXBASIC_VAR_i1),HL
; 		4515.2  LET i2= INT f2
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	CALL runtimeFloatToInt
	LD (ZXBASIC_VAR_i2),HL
ZX_LINE_4516:
; 4516  PRINT "f1=";f1;" f2=";f2: PRINT "i1=";i1;" i2=";i2
; 		4516.1  PRINT "f1=";f1;" f2=";f2
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_52	;f1=
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	LD HL,STRING_53	; f2=
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	CALL runtimePrintNewline
; 		4516.2  PRINT "i1=";i1;" i2=";i2
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_54	;i1=
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_i1)
	CALL runtimePrintInt
	LD HL,STRING_55	; i2=
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_i2)
	CALL runtimePrintInt
	CALL runtimePrintNewline
ZX_LINE_4520:
; 4520  LET f3=f1/f2
; 		4520.1  LET f3=f1/f2
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	RST $28
	DB $05	;DIV
	DB $38	;END CALC
	LD HL,ZXBASIC_VAR_f3
	CALL runtimeStoreFloat
ZX_LINE_4530:
; 4530  PRINT "f1/f2=";f3
; 		4530.1  PRINT "f1/f2=";f3
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_56	;f1/f2=
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_f3
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	CALL runtimePrintNewline
ZX_LINE_4540:
; 4540  PRINT "10-f3=";10{00 00 0a 00 00 }-f3: PRINT "f3-10=";f3-10{00 00 0a 00 00 }
; 		4540.1  PRINT "10-f3=";10{00 00 0a 00 00 }-f3
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_57	;10-f3=
	CALL runtimePrintString
	LD HL,10
	PUSH HL
	LD HL,ZXBASIC_VAR_f3
	CALL runtimePushFloatVar
	POP HL
	CALL runtimeIntToFloat
	CALL runtimeSwapFloat
	CALL runtimeMinusFloat
	CALL runtimePrintFloat
	CALL runtimePrintNewline
; 		4540.2  PRINT "f3-10=";f3-10{00 00 0a 00 00 }
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_58	;f3-10=
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_f3
	CALL runtimePushFloatVar
	LD HL,10
	CALL runtimeIntToFloat
	CALL runtimeMinusFloat
	CALL runtimePrintFloat
	CALL runtimePrintNewline
ZX_LINE_4599:
; 4599  GOTO 3600{00 00 10 0e 00 }
; 		4599.1  GOTO 3600{00 00 10 0e 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3600
ZX_LINE_4600:
; 4600  PRINT "STKBOT="; PEEK (23651{00 00 63 5c 00 })+ PEEK (23652{00 00 64 5c 00 })*256{00 00 00 01 00 },
; 		4600.1  PRINT "STKBOT="; PEEK (23651{00 00 63 5c 00 })+ PEEK (23652{00 00 64 5c 00 })*256{00 00 00 01 00 },
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_59	;STKBOT=
	CALL runtimePrintString
	LD A,(23651)
	LD L,A
	LD H,0
	LD BC,HL
	LD A,(23652)
	LD H,A
	LD L,0
	LD DE,BC
	ADD HL,DE
	CALL runtimePrintInt
	CALL runtimePrintTab
ZX_LINE_4620:
; 4620  PRINT "STKEND="; PEEK 23653{00 00 65 5c 00 }+ PEEK 23654{00 00 66 5c 00 }*256{00 00 00 01 00 }
; 		4620.1  PRINT "STKEND="; PEEK 23653{00 00 65 5c 00 }+ PEEK 23654{00 00 66 5c 00 }*256{00 00 00 01 00 }
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_60	;STKEND=
	CALL runtimePrintString
	LD A,(23653)
	LD L,A
	LD H,0
	LD BC,HL
	LD A,(23654)
	LD H,A
	LD L,0
	LD DE,BC
	ADD HL,DE
	CALL runtimePrintInt
	CALL runtimePrintNewline
ZX_LINE_4630:
; 4630  RETURN 
; 		4630.1  RETURN 
	CALL runtimeCheckBreak
	RET
ZX_LINE_4800:
; 4800  REM graph
ZX_LINE_4801:
; 4801  REM float xf yf
ZX_LINE_4802:
; 4802  GOSUB 3700{00 00 74 0e 00 }: CLS : PRINT  AT 0{00 00 00 00 00 },15{00 00 0f 00 00 };"SIN und COS"
; 		4802.1  GOSUB 3700{00 00 74 0e 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_3700:
; 		4802.2  CLS 
	CALL runtimeCls
; 		4802.3  PRINT  AT 0{00 00 00 00 00 },15{00 00 0f 00 00 };"SIN und COS"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,0
	LD HL,15
	CALL runtimePrintAt
	LD HL,STRING_61	;SIN und COS
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_4805:
; 4805  PLOT 0{00 00 00 00 00 },80{00 00 50 00 00 }: DRAW 255{00 00 ff 00 00 },0{00 00 00 00 00 }
; 		4805.1  PLOT 0{00 00 00 00 00 },80{00 00 50 00 00 }
	LD DE,0
	LD HL,80
	CALL runtimePlot
; 		4805.2  DRAW 255{00 00 ff 00 00 },0{00 00 00 00 00 }
	LD DE,255
	LD HL,0
	LD B,L
	LD C,E
	CALL runtimeDraw
ZX_LINE_4809:
; 4809  LET c=0{00 00 00 00 00 }
; 		4809.1  LET c=0{00 00 00 00 00 }
	LD HL,0
	LD (ZXBASIC_VAR_c),HL
ZX_LINE_4810:
; 4810  FOR x=0{00 00 00 00 00 } TO 250{00 00 fa 00 00 }
; 		4810.1  FOR x=0{00 00 00 00 00 } TO 250{00 00 fa 00 00 }
	CALL runtimeCheckBreak
	LD HL,0
	LD (ZXBASIC_VAR_x),HL
	LD HL,250
	LD (ZXBASIC_VAR_for_x),HL
FOR_18:
ZX_LINE_4820:
; 4820  LET xf=x* PI /50{00 00 32 00 00 }
; 		4820.1  LET xf=x* PI /50{00 00 32 00 00 }
	LD HL,(ZXBASIC_VAR_x)
	PUSH HL
	CALL runtimePushPi
	POP HL
	CALL runtimeIntToFloat
	RST $28
	DB $04	;MULT
	DB $38	;END CALC
	LD HL,50
	CALL runtimeIntToFloat
	RST $28
	DB $05	;DIV
	DB $38	;END CALC
	LD HL,ZXBASIC_VAR_xf
	CALL runtimeStoreFloat
ZX_LINE_4830:
; 4830  LET yf=80{00 00 50 00 00 }+(80{00 00 50 00 00 }* SIN xf)
; 		4830.1  LET yf=80{00 00 50 00 00 }+(80{00 00 50 00 00 }* SIN xf)
	LD HL,80
	PUSH HL
	LD HL,80
	PUSH HL
	LD HL,ZXBASIC_VAR_xf
	CALL runtimePushFloatVar
	RST $28
	db zxcalc_sin
	db $38	;end calc
	POP HL
	CALL runtimeIntToFloat
	RST $28
	DB $04	;MULT
	DB $38	;END CALC
	POP HL
	CALL runtimeIntToFloat
	CALL runtimePlusFloat
	LD HL,ZXBASIC_VAR_yf
	CALL runtimeStoreFloat
ZX_LINE_4835:
; 4835  PLOT x,yf
; 		4835.1  PLOT x,yf
	LD HL,(ZXBASIC_VAR_x)
	PUSH HL
	LD HL,ZXBASIC_VAR_yf
	CALL runtimePushFloatVar
	CALL runtimeFloatToInt
	POP DE
	CALL runtimePlot
ZX_LINE_4840:
; 4840  LET yf=80{00 00 50 00 00 }+(80{00 00 50 00 00 }* COS xf)
; 		4840.1  LET yf=80{00 00 50 00 00 }+(80{00 00 50 00 00 }* COS xf)
	LD HL,80
	PUSH HL
	LD HL,80
	PUSH HL
	LD HL,ZXBASIC_VAR_xf
	CALL runtimePushFloatVar
	RST $28
	db zxcalc_cos
	db $38	;end calc
	POP HL
	CALL runtimeIntToFloat
	RST $28
	DB $04	;MULT
	DB $38	;END CALC
	POP HL
	CALL runtimeIntToFloat
	CALL runtimePlusFloat
	LD HL,ZXBASIC_VAR_yf
	CALL runtimeStoreFloat
ZX_LINE_4844:
; 4844  IF c=0{00 00 00 00 00 } THEN  GOSUB 4900{00 00 24 13 00 }: LET c=51{00 00 33 00 00 }
; 		4844.1  IF c=0{00 00 00 00 00 } THEN  GOSUB 4900{00 00 24 13 00 }
	LD DE,(ZXBASIC_VAR_c)
	LD HL,0
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_22
; 		4844.2  GOSUB 4900{00 00 24 13 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_4900:
; 		4844.3  LET c=51{00 00 33 00 00 }
	LD HL,51
	LD (ZXBASIC_VAR_c),HL
ZXB_LABEL_22:
ZX_LINE_4845:
; 4845  PLOT x,yf
; 		4845.1  PLOT x,yf
	LD HL,(ZXBASIC_VAR_x)
	PUSH HL
	LD HL,ZXBASIC_VAR_yf
	CALL runtimePushFloatVar
	CALL runtimeFloatToInt
	POP DE
	CALL runtimePlot
ZX_LINE_4846:
; 4846  IF c=0{00 00 00 00 00 } THEN  LET c=51{00 00 33 00 00 }: GOSUB 4900{00 00 24 13 00 }
; 		4846.1  IF c=0{00 00 00 00 00 } THEN  LET c=51{00 00 33 00 00 }
	LD DE,(ZXBASIC_VAR_c)
	LD HL,0
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_23
; 		4846.2  LET c=51{00 00 33 00 00 }
	LD HL,51
	LD (ZXBASIC_VAR_c),HL
; 		4846.3  GOSUB 4900{00 00 24 13 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_4900:
ZXB_LABEL_23:
ZX_LINE_4847:
; 4847  LET c=c-1{00 00 01 00 00 }
; 		4847.1  LET c=c-1{00 00 01 00 00 }
	LD HL,(ZXBASIC_VAR_c)
	DEC HL
	LD (ZXBASIC_VAR_c),HL
ZX_LINE_4850:
; 4850  NEXT x
; 		4850.1  NEXT x
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_x)
	INC HL
	LD (ZXBASIC_VAR_x),HL
	LD DE,(ZXBASIC_VAR_for_x)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_18
ZX_LINE_4890:
; 4890  GOTO 3710{00 00 7e 0e 00 }
; 		4890.1  GOTO 3710{00 00 7e 0e 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3710
ZX_LINE_4900:
; 4900  LET x$= STR xf
; 		4900.1  LET x$= STR xf
	LD HL,ZXBASIC_VAR_xf
	CALL runtimePushFloatVar
	CALL runtimeStr
	LD DE,HL
	LD HL,ZXBASIC_VAR_x_string
	CALL runtimeStoreString
ZX_LINE_4910:
; 4910  LET ix=x/8{00 00 08 00 00 }: IF ix >= 31{00 00 1f 00 00 } THEN  LET ix=31{00 00 1f 00 00 }
; 		4910.1  LET ix=x/8{00 00 08 00 00 }
	LD DE,(ZXBASIC_VAR_x)
	LD HL,8
	call runtimeDiv16bit
	LD (ZXBASIC_VAR_ix),HL
; 		4910.2  IF ix >= 31{00 00 1f 00 00 } THEN  LET ix=31{00 00 1f 00 00 }
	LD DE,(ZXBASIC_VAR_ix)
	LD HL,31
	SUB HL,DE
	LD HL,0
	call c,HL1
	call z,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_24
; 		4910.3  LET ix=31{00 00 1f 00 00 }
	LD HL,31
	LD (ZXBASIC_VAR_ix),HL
ZXB_LABEL_24:
ZX_LINE_4920:
; 4920  FOR i=1{00 00 01 00 00 } TO  LEN x$
; 		4920.1  FOR i=1{00 00 01 00 00 } TO  LEN x$
	CALL runtimeCheckBreak
	LD HL,1
	LD (ZXBASIC_VAR_i),HL
	LD HL,(ZXBASIC_VAR_x_string)
	CALL runtimeLen
	LD (ZXBASIC_VAR_for_i),HL
FOR_19:
	CALL ZXFreeTempCompact
ZX_LINE_4930:
; 4930  PRINT  AT i+5{00 00 05 00 00 },ix;x$(i)
; 		4930.1  PRINT  AT i+5{00 00 05 00 00 },ix;x$(i)
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,(ZXBASIC_VAR_i)
	LD HL,5
	ADD HL,DE
	LD DE,HL
	LD HL,(ZXBASIC_VAR_ix)
	CALL runtimePrintAt
	LD HL,(ZXBASIC_VAR_x_string)
	PUSH HL
	LD HL,(ZXBASIC_VAR_i)
	POP BC
	CALL runtimeCharAt
	CALL runtimePrintString
	CALL runtimePrintNewline
	CALL ZXFreeTempCompact
ZX_LINE_4940:
; 4940  NEXT i
; 		4940.1  NEXT i
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_i)
	INC HL
	LD (ZXBASIC_VAR_i),HL
	LD DE,(ZXBASIC_VAR_for_i)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_19
ZX_LINE_4950:
; 4950  RETURN 
; 		4950.1  RETURN 
	CALL runtimeCheckBreak
	RET
ZX_LINE_5000:
; 5000  CLS : GOSUB 5450{00 00 4a 15 00 }: PRINT  AT 0{00 00 00 00 00 },20{00 00 14 00 00 };"Mandelbrot"
; 		5000.1  CLS 
	CALL runtimeCls
; 		5000.2  GOSUB 5450{00 00 4a 15 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_5450:
; 		5000.3  PRINT  AT 0{00 00 00 00 00 },20{00 00 14 00 00 };"Mandelbrot"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,0
	LD HL,20
	CALL runtimePrintAt
	LD HL,STRING_62	;Mandelbrot
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_5001:
; 5001  REM float xf z1 zz zf zt zi z nf
ZX_LINE_5002:
; 5002  LET nf=0.0{00 00 00 00 00 }
; 		5002.1  LET nf=0.0{00 00 00 00 00 }
	LD HL,FLOAT_5	;0.0
	LD DE,ZXBASIC_VAR_nf
	LD BC,5
	LDIR
ZX_LINE_5005:
; 5005  LET my=0{00 00 00 00 00 }
; 		5005.1  LET my=0{00 00 00 00 00 }
	LD HL,0
	LD (ZXBASIC_VAR_my),HL
ZX_LINE_5010:
; 5010  LET xf=nf-2.0{00 00 02 00 00 }
; 		5010.1  LET xf=nf-2.0{00 00 02 00 00 }
	LD HL,ZXBASIC_VAR_nf
	CALL runtimePushFloatVar
	LD HL,FLOAT_6	;2.0
	CALL runtimePushFloatVar
	RST $28
	DB $03	;SUB
	DB $38	;END CALC
	LD HL,ZXBASIC_VAR_xf
	CALL runtimeStoreFloat
ZX_LINE_5015:
; 5015  LET mx=0{00 00 00 00 00 }
; 		5015.1  LET mx=0{00 00 00 00 00 }
	LD HL,0
	LD (ZXBASIC_VAR_mx),HL
ZX_LINE_5016:
; 5016  GOSUB 5400{00 00 18 15 00 }: PRINT  AT 21{00 00 15 00 00 },0{00 00 00 00 00 };"x=";xf;"    "; AT 21{00 00 15 00 00 },20{00 00 14 00 00 };"time=";sec
; 		5016.1  GOSUB 5400{00 00 18 15 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_5400:
; 		5016.2  PRINT  AT 21{00 00 15 00 00 },0{00 00 00 00 00 };"x=";xf;"    "; AT 21{00 00 15 00 00 },20{00 00 14 00 00 };"time=";sec
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,21
	LD HL,0
	CALL runtimePrintAt
	LD HL,STRING_63	;x=
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_xf
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	LD HL,STRING_64	;    
	CALL runtimePrintString
	LD DE,21
	LD HL,20
	CALL runtimePrintAt
	LD HL,STRING_65	;time=
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_sec
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	CALL runtimePrintNewline
ZX_LINE_5017:
; 5017  LET my=my+1{00 00 01 00 00 }
; 		5017.1  LET my=my+1{00 00 01 00 00 }
	LD HL,(ZXBASIC_VAR_my)
	INC HL
	LD (ZXBASIC_VAR_my),HL
ZX_LINE_5020:
; 5020  LET yf=nf-1.0{00 00 01 00 00 }
; 		5020.1  LET yf=nf-1.0{00 00 01 00 00 }
	LD HL,ZXBASIC_VAR_nf
	CALL runtimePushFloatVar
	LD HL,FLOAT_7	;1.0
	CALL runtimePushFloatVar
	RST $28
	DB $03	;SUB
	DB $38	;END CALC
	LD HL,ZXBASIC_VAR_yf
	CALL runtimeStoreFloat
ZX_LINE_5025:
; 5025  LET mx=mx+1{00 00 01 00 00 }
; 		5025.1  LET mx=mx+1{00 00 01 00 00 }
	LD HL,(ZXBASIC_VAR_mx)
	INC HL
	LD (ZXBASIC_VAR_mx),HL
ZX_LINE_5030:
; 5030  LET zz=0.0{00 00 00 00 00 }
; 		5030.1  LET zz=0.0{00 00 00 00 00 }
	LD HL,FLOAT_5	;0.0
	CALL runtimePushFloatVar
	CALL runtimeFloatToInt
	LD (ZXBASIC_VAR_zz),HL
ZX_LINE_5035:
; 5035  LET zi=0.0{00 00 00 00 00 }
; 		5035.1  LET zi=0.0{00 00 00 00 00 }
	LD HL,FLOAT_5	;0.0
	LD DE,ZXBASIC_VAR_zi
	LD BC,5
	LDIR
ZX_LINE_5040:
; 5040  FOR i=1{00 00 01 00 00 } TO 100{00 00 64 00 00 }
; 		5040.1  FOR i=1{00 00 01 00 00 } TO 100{00 00 64 00 00 }
	CALL runtimeCheckBreak
	LD HL,1
	LD (ZXBASIC_VAR_i),HL
	LD HL,100
	LD (ZXBASIC_VAR_for_i),HL
FOR_20:
ZX_LINE_5045:
; 5045  IF zz>1000.0{00 00 e8 03 00 } ORX zi>1000.0{00 00 e8 03 00 } THEN  GOTO 5100{00 00 ec 13 00 }
; 		5045.1  IF zz>1000.0{00 00 e8 03 00 } ORX zi>1000.0{00 00 e8 03 00 } THEN  GOTO 5100{00 00 ec 13 00 }
	LD HL,(ZXBASIC_VAR_zz)
	PUSH HL
	LD HL,FLOAT_8	;1000.0
	CALL runtimePushFloatVar
	POP HL
	CALL runtimeIntToFloat
	CALL runtimeSwapFloat
	CALL runtimeBiggerFloat
	PUSH HL
	LD HL,ZXBASIC_VAR_zi
	CALL runtimePushFloatVar
	LD HL,FLOAT_8	;1000.0
	CALL runtimePushFloatVar
	CALL runtimeBiggerFloat
	POP DE
	LD A,L
	OR E
	LD L,A
	LD H,0
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_25
; 		5045.2  GOTO 5100{00 00 ec 13 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_5100
ZXB_LABEL_25:
ZX_LINE_5050:
; 5050  LET zt=zz*zz-zi*zi+xf
; 		5050.1  LET zt=zz*zz-zi*zi+xf
	LD DE,(ZXBASIC_VAR_zz)
	LD HL,(ZXBASIC_VAR_zz)
	call runtimeMult16bit
	PUSH HL
	LD HL,ZXBASIC_VAR_zi
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_zi
	CALL runtimePushFloatVar
	RST $28
	DB $04	;MULT
	DB $38	;END CALC
	POP HL
	CALL runtimeIntToFloat
	CALL runtimeSwapFloat
	CALL runtimeMinusFloat
	LD HL,ZXBASIC_VAR_xf
	CALL runtimePushFloatVar
	RST $28
	DB $0f	;ADD
	DB $38	;END CALC
	LD HL,ZXBASIC_VAR_zt
	CALL runtimeStoreFloat
ZX_LINE_5060:
; 5060  LET zi=2.0{00 00 02 00 00 }*zz*zi+yf
; 		5060.1  LET zi=2.0{00 00 02 00 00 }*zz*zi+yf
	LD HL,FLOAT_6	;2.0
	CALL runtimePushFloatVar
	LD HL,(ZXBASIC_VAR_zz)
	CALL runtimeIntToFloat
	RST $28
	DB $04	;MULT
	DB $38	;END CALC
	LD HL,ZXBASIC_VAR_zi
	CALL runtimePushFloatVar
	RST $28
	DB $04	;MULT
	DB $38	;END CALC
	LD HL,ZXBASIC_VAR_yf
	CALL runtimePushFloatVar
	RST $28
	DB $0f	;ADD
	DB $38	;END CALC
	LD HL,ZXBASIC_VAR_zi
	CALL runtimeStoreFloat
ZX_LINE_5070:
; 5070  LET zz=zt
; 		5070.1  LET zz=zt
	LD HL,ZXBASIC_VAR_zt
	CALL runtimePushFloatVar
	CALL runtimeFloatToInt
	LD (ZXBASIC_VAR_zz),HL
ZX_LINE_5080:
; 5080  NEXT i
; 		5080.1  NEXT i
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_i)
	INC HL
	LD (ZXBASIC_VAR_i),HL
	LD DE,(ZXBASIC_VAR_for_i)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_20
ZX_LINE_5090:
; 5090  IF zz<2.0{00 00 02 00 00 } THEN  PLOT my,mx
; 		5090.1  IF zz<2.0{00 00 02 00 00 } THEN  PLOT my,mx
	LD HL,(ZXBASIC_VAR_zz)
	PUSH HL
	LD HL,FLOAT_6	;2.0
	CALL runtimePushFloatVar
	POP HL
	CALL runtimeIntToFloat
	CALL runtimeSwapFloat
	CALL runtimeSmallerFloat
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_26
; 		5090.2  PLOT my,mx
	LD DE,(ZXBASIC_VAR_my)
	LD HL,(ZXBASIC_VAR_mx)
	CALL runtimePlot
ZXB_LABEL_26:
ZX_LINE_5100:
; 5100  LET yf=yf+0.0156{7a 7f 97 24 74 }: IF yf<1.0{00 00 01 00 00 } THEN  GOTO 5025{00 00 a1 13 00 }
; 		5100.1  LET yf=yf+0.0156{7a 7f 97 24 74 }
	LD HL,ZXBASIC_VAR_yf
	CALL runtimePushFloatVar
	LD HL,FLOAT_9	;0.0156
	CALL runtimePushFloatVar
	RST $28
	DB $0f	;ADD
	DB $38	;END CALC
	LD HL,ZXBASIC_VAR_yf
	CALL runtimeStoreFloat
; 		5100.2  IF yf<1.0{00 00 01 00 00 } THEN  GOTO 5025{00 00 a1 13 00 }
	LD HL,ZXBASIC_VAR_yf
	CALL runtimePushFloatVar
	LD HL,FLOAT_7	;1.0
	CALL runtimePushFloatVar
	CALL runtimeSmallerFloat
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_27
; 		5100.3  GOTO 5025{00 00 a1 13 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_5025
ZXB_LABEL_27:
ZX_LINE_5110:
; 5110  LET xf=xf+0.0156{7a 7f 97 24 74 }: IF xf<2.0{00 00 02 00 00 } THEN  GOTO 5015{00 00 97 13 00 }
; 		5110.1  LET xf=xf+0.0156{7a 7f 97 24 74 }
	LD HL,ZXBASIC_VAR_xf
	CALL runtimePushFloatVar
	LD HL,FLOAT_9	;0.0156
	CALL runtimePushFloatVar
	RST $28
	DB $0f	;ADD
	DB $38	;END CALC
	LD HL,ZXBASIC_VAR_xf
	CALL runtimeStoreFloat
; 		5110.2  IF xf<2.0{00 00 02 00 00 } THEN  GOTO 5015{00 00 97 13 00 }
	LD HL,ZXBASIC_VAR_xf
	CALL runtimePushFloatVar
	LD HL,FLOAT_6	;2.0
	CALL runtimePushFloatVar
	CALL runtimeSmallerFloat
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_28
; 		5110.3  GOTO 5015{00 00 97 13 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_5015
ZXB_LABEL_28:
ZX_LINE_5120:
; 5120  GOTO 3600{00 00 10 0e 00 }
; 		5120.1  GOTO 3600{00 00 10 0e 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3600
ZX_LINE_5200:
; 5200  CLS : PRINT "FOR .. STEP"
; 		5200.1  CLS 
	CALL runtimeCls
; 		5200.2  PRINT "FOR .. STEP"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_66	;FOR .. STEP
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_5220:
; 5220  PRINT "Integer"
; 		5220.1  PRINT "Integer"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_67	;Integer
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_5230:
; 5230  FOR i=1{00 00 01 00 00 } TO 10{00 00 0a 00 00 }: PRINT i;", ";: NEXT i: PRINT 
; 		5230.1  FOR i=1{00 00 01 00 00 } TO 10{00 00 0a 00 00 }
	CALL runtimeCheckBreak
	LD HL,1
	LD (ZXBASIC_VAR_i),HL
	LD HL,10
	LD (ZXBASIC_VAR_for_i),HL
FOR_21:
; 		5230.2  PRINT i;", ";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,(ZXBASIC_VAR_i)
	CALL runtimePrintInt
	LD HL,STRING_68	;, 
	CALL runtimePrintString
; 		5230.3  NEXT i
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_i)
	INC HL
	LD (ZXBASIC_VAR_i),HL
	LD DE,(ZXBASIC_VAR_for_i)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_21
; 		5230.4  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
ZX_LINE_5235:
; 5235  PRINT "for mit int": FOR i=1{00 00 01 00 00 } TO 10{00 00 0a 00 00 } STEP 2{00 00 02 00 00 }: PRINT i;", ";: NEXT i: PRINT 
; 		5235.1  PRINT "for mit int"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_69	;for mit int
	CALL runtimePrintString
	CALL runtimePrintNewline
; 		5235.2  FOR i=1{00 00 01 00 00 } TO 10{00 00 0a 00 00 } STEP 2{00 00 02 00 00 }
	CALL runtimeCheckBreak
	LD HL,1
	LD (ZXBASIC_VAR_i),HL
	LD HL,10
	LD (ZXBASIC_VAR_for_i),HL
	LD HL,2
	LD (ZXBASIC_VAR_for_i_step),HL
FOR_22:
; 		5235.3  PRINT i;", ";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,(ZXBASIC_VAR_i)
	CALL runtimePrintInt
	LD HL,STRING_68	;, 
	CALL runtimePrintString
; 		5235.4  NEXT i
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_i)
	LD BC,(ZXBASIC_VAR_for_i_step)
	LD A,B
	ADD HL,BC
	LD (ZXBASIC_VAR_i),HL
	LD DE,(ZXBASIC_VAR_for_i)
	AND $80
	JR Z,FOR_22_1
	SUB HL,DE
	JP NC,FOR_22
	JR FOR_22_2
FOR_22_1:
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_22
FOR_22_2:
; 		5235.5  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
ZX_LINE_5240:
; 5240   PRINT "for int step -1"
; 		5240.1  PRINT "for int step -1"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_70	;for int step -1
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_5250:
; 5250  FOR i=10{00 00 0a 00 00 } TO 1{00 00 01 00 00 } STEP 0{00 00 00 00 00 }-1{00 00 01 00 00 }: PRINT i;", ";: NEXT i: PRINT 
; 		5250.1  FOR i=10{00 00 0a 00 00 } TO 1{00 00 01 00 00 } STEP 0{00 00 00 00 00 }-1{00 00 01 00 00 }
	CALL runtimeCheckBreak
	LD HL,10
	LD (ZXBASIC_VAR_i),HL
	LD HL,1
	LD (ZXBASIC_VAR_for_i),HL
	LD HL,0
	LD DE,1
	SUB HL,DE
	LD (ZXBASIC_VAR_for_i_step),HL
FOR_23:
; 		5250.2  PRINT i;", ";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,(ZXBASIC_VAR_i)
	CALL runtimePrintInt
	LD HL,STRING_68	;, 
	CALL runtimePrintString
; 		5250.3  NEXT i
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_i)
	LD BC,(ZXBASIC_VAR_for_i_step)
	LD A,B
	ADD HL,BC
	LD (ZXBASIC_VAR_i),HL
	LD DE,(ZXBASIC_VAR_for_i)
	AND $80
	JR Z,FOR_23_1
	SUB HL,DE
	JP NC,FOR_23
	JR FOR_23_2
FOR_23_1:
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_23
FOR_23_2:
; 		5250.4  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
ZX_LINE_5255:
; 5255  PRINT "for int. fp param convert to int": FOR i= PI  TO 3{00 00 03 00 00 }* PI  STEP  PI : PRINT i;" ";: NEXT i: PRINT 
; 		5255.1  PRINT "for int. fp param convert to int"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_71	;for int. fp param convert to int
	CALL runtimePrintString
	CALL runtimePrintNewline
; 		5255.2  FOR i= PI  TO 3{00 00 03 00 00 }* PI  STEP  PI 
	CALL runtimeCheckBreak
	CALL runtimePushPi
	CALL runtimeFloatToInt
	LD (ZXBASIC_VAR_i),HL
	LD HL,3
	PUSH HL
	CALL runtimePushPi
	POP HL
	CALL runtimeIntToFloat
	RST $28
	DB $04	;MULT
	DB $38	;END CALC
	CALL runtimeFloatToInt
	LD (ZXBASIC_VAR_for_i),HL
	CALL runtimePushPi
	CALL runtimeFloatToInt
	LD (ZXBASIC_VAR_for_i_step),HL
FOR_24:
; 		5255.3  PRINT i;" ";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,(ZXBASIC_VAR_i)
	CALL runtimePrintInt
	LD HL,STRING_35	; 
	CALL runtimePrintString
; 		5255.4  NEXT i
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_i)
	LD BC,(ZXBASIC_VAR_for_i_step)
	LD A,B
	ADD HL,BC
	LD (ZXBASIC_VAR_i),HL
	LD DE,(ZXBASIC_VAR_for_i)
	AND $80
	JR Z,FOR_24_1
	SUB HL,DE
	JP NC,FOR_24
	JR FOR_24_2
FOR_24_1:
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_24
FOR_24_2:
; 		5255.5  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
ZX_LINE_5260:
; 5260  PRINT "for mit fp": FOR f= PI  TO 3{00 00 03 00 00 }* PI : PRINT f;" ";: NEXT f: PRINT 
; 		5260.1  PRINT "for mit fp"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_72	;for mit fp
	CALL runtimePrintString
	CALL runtimePrintNewline
; 		5260.2  FOR f= PI  TO 3{00 00 03 00 00 }* PI 
	CALL runtimeCheckBreak
	CALL runtimePushPi
	LD HL,ZXBASIC_VAR_f
	CALL runtimeStoreFloat
	LD HL,3
	PUSH HL
	CALL runtimePushPi
	POP HL
	CALL runtimeIntToFloat
	RST $28
	DB $04	;MULT
	DB $38	;END CALC
	LD HL,ZXBASIC_VAR_for_f
	CALL runtimeStoreFloat
FOR_25:
; 		5260.3  PRINT f;" ";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,ZXBASIC_VAR_f
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	LD HL,STRING_35	; 
	CALL runtimePrintString
; 		5260.4  NEXT f
	CALL runtimeCheckBreak
	LD HL,ZXBASIC_VAR_f
	CALL runtimePushFloatVar
	RST $28
	DB zxcalc_stack_one	;STACK ONE
	DB zxcalc_addition	;ADD
	DB zxcalc_end_calc	;END CALC
	LD HL,ZXBASIC_VAR_f
	CALL runtimeStoreFloat
	LD HL,ZXBASIC_VAR_for_f
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_f
	CALL runtimePushFloatVar
	CALL runtimeBiggerFloat
	LD A,L
	CP 0
	JP Z,FOR_25
; 		5260.5  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
ZX_LINE_5265:
; 5265  PRINT "for fp step": FOR f= PI  TO 10{00 00 0a 00 00 }* PI  STEP  PI : PRINT f;" ";: NEXT f: PRINT 
; 		5265.1  PRINT "for fp step"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_73	;for fp step
	CALL runtimePrintString
	CALL runtimePrintNewline
; 		5265.2  FOR f= PI  TO 10{00 00 0a 00 00 }* PI  STEP  PI 
	CALL runtimeCheckBreak
	CALL runtimePushPi
	LD HL,ZXBASIC_VAR_f
	CALL runtimeStoreFloat
	LD HL,10
	PUSH HL
	CALL runtimePushPi
	POP HL
	CALL runtimeIntToFloat
	RST $28
	DB $04	;MULT
	DB $38	;END CALC
	LD HL,ZXBASIC_VAR_for_f
	CALL runtimeStoreFloat
	CALL runtimePushPi
	LD HL,ZXBASIC_VAR_for_f_step
	CALL runtimeStoreFloat
FOR_26:
; 		5265.3  PRINT f;" ";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,ZXBASIC_VAR_f
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	LD HL,STRING_35	; 
	CALL runtimePrintString
; 		5265.4  NEXT f
	CALL runtimeCheckBreak
	LD HL,ZXBASIC_VAR_for_f
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_f
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_for_f_step
	CALL runtimePushFloatVar
	RST $28
	DB zxcalc_addition	;ADD
	DB zxcalc_duplicate	;DUPLICATE
	DB $38	;END CALC
	LD HL,ZXBASIC_VAR_f
	CALL runtimeStoreFloat
	RST $28
	db zxcalc_subtract
	db zxcalc_end_calc
	LD HL,ZXBASIC_VAR_for_f_step
	CALL runtimePushFloatVar
	CALL runtimeNextFloat
	CP 0
	JP Z,FOR_26
; 		5265.5  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
ZX_LINE_5270:
; 5270  PRINT "for fp step": FOR f=10{00 00 0a 00 00 }* PI  TO  PI  STEP 0{00 00 00 00 00 }- PI : PRINT f;" ";: NEXT f: PRINT 
; 		5270.1  PRINT "for fp step"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_73	;for fp step
	CALL runtimePrintString
	CALL runtimePrintNewline
; 		5270.2  FOR f=10{00 00 0a 00 00 }* PI  TO  PI  STEP 0{00 00 00 00 00 }- PI 
	CALL runtimeCheckBreak
	LD HL,10
	PUSH HL
	CALL runtimePushPi
	POP HL
	CALL runtimeIntToFloat
	RST $28
	DB $04	;MULT
	DB $38	;END CALC
	LD HL,ZXBASIC_VAR_f
	CALL runtimeStoreFloat
	CALL runtimePushPi
	LD HL,ZXBASIC_VAR_for_f
	CALL runtimeStoreFloat
	LD HL,0
	PUSH HL
	CALL runtimePushPi
	POP HL
	CALL runtimeIntToFloat
	CALL runtimeSwapFloat
	CALL runtimeMinusFloat
	LD HL,ZXBASIC_VAR_for_f_step
	CALL runtimeStoreFloat
FOR_27:
; 		5270.3  PRINT f;" ";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,ZXBASIC_VAR_f
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	LD HL,STRING_35	; 
	CALL runtimePrintString
; 		5270.4  NEXT f
	CALL runtimeCheckBreak
	LD HL,ZXBASIC_VAR_for_f
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_f
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_for_f_step
	CALL runtimePushFloatVar
	RST $28
	DB zxcalc_addition	;ADD
	DB zxcalc_duplicate	;DUPLICATE
	DB $38	;END CALC
	LD HL,ZXBASIC_VAR_f
	CALL runtimeStoreFloat
	RST $28
	db zxcalc_subtract
	db zxcalc_end_calc
	LD HL,ZXBASIC_VAR_for_f_step
	CALL runtimePushFloatVar
	CALL runtimeNextFloat
	CP 0
	JP Z,FOR_27
; 		5270.5  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
ZX_LINE_5299:
; 5299  GOTO 3600{00 00 10 0e 00 }
; 		5299.1  GOTO 3600{00 00 10 0e 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3600
ZX_LINE_5300:
; 5300  CLS 
; 		5300.1  CLS 
	CALL runtimeCls
ZX_LINE_5310:
; 5310  REM asm call runtimeHeapwalk
	 call runtimeHeapwalk
ZX_LINE_5320:
; 5320  GOTO 3600{00 00 10 0e 00 }
; 		5320.1  GOTO 3600{00 00 10 0e 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3600
ZX_LINE_5400:
; 5400  LET time= PEEK 23672{00 00 78 5c 00 }+ PEEK 23673{00 00 79 5c 00 }*256{00 00 00 01 00 }
; 		5400.1  LET time= PEEK 23672{00 00 78 5c 00 }+ PEEK 23673{00 00 79 5c 00 }*256{00 00 00 01 00 }
	LD A,(23672)
	LD L,A
	LD H,0
	LD BC,HL
	LD A,(23673)
	LD H,A
	LD L,0
	LD DE,BC
	ADD HL,DE
	LD (ZXBASIC_VAR_time),HL
ZX_LINE_5410:
; 5410  LET sec=(time-timestart)/50{00 00 32 00 00 }
; 		5410.1  LET sec=(time-timestart)/50{00 00 32 00 00 }
	LD HL,(ZXBASIC_VAR_time)
	LD DE,(ZXBASIC_VAR_timestart)
	SUB HL,DE
	LD DE,HL
	LD HL,50
	call runtimeDiv16bit
	CALL runtimeIntToFloat
	LD HL,ZXBASIC_VAR_sec
	CALL runtimeStoreFloat
ZX_LINE_5420:
; 5420  RETURN 
; 		5420.1  RETURN 
	CALL runtimeCheckBreak
	RET
ZX_LINE_5450:
; 5450  LET timestart=0{00 00 00 00 00 }: GOSUB 5400{00 00 18 15 00 }: LET timestart=time: RETURN 
; 		5450.1  LET timestart=0{00 00 00 00 00 }
	LD HL,0
	LD (ZXBASIC_VAR_timestart),HL
; 		5450.2  GOSUB 5400{00 00 18 15 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_5400:
; 		5450.3  LET timestart=time
	LD HL,(ZXBASIC_VAR_time)
	LD (ZXBASIC_VAR_timestart),HL
; 		5450.4  RETURN 
	CALL runtimeCheckBreak
	RET
ZX_LINE_5500:
; 5500  CLS : PRINT "Eingabe Integer": INPUT 1000{00 00 e8 03 00 }+123{00 00 7b 00 00 };" x=";x
; 		5500.1  CLS 
	CALL runtimeCls
; 		5500.2  PRINT "Eingabe Integer"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_74	;Eingabe Integer
	CALL runtimePrintString
	CALL runtimePrintNewline
; 		5500.3  INPUT 1000{00 00 e8 03 00 }+123{00 00 7b 00 00 };" x=";x
	LD A,$01
	CALL $1601
	CALL $0D6E
	LD A,1
	LD ($5C3A),A
	LD DE,1000
	LD HL,123
	ADD HL,DE
	CALL runtimePrintInt
	LD HL,STRING_75	; x=
	CALL runtimePrintString
	CALL runtimeInputInt
	LD (ZXBASIC_VAR_x),HL
	CALL $0D6E	;Clear lower screen
ZX_LINE_5520:
; 5520  PRINT "Ausgabe int Eingabe int": INPUT "x=";(x);" y=";y
; 		5520.1  PRINT "Ausgabe int Eingabe int"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_76	;Ausgabe int Eingabe int
	CALL runtimePrintString
	CALL runtimePrintNewline
; 		5520.2  INPUT "x=";(x);" y=";y
	LD A,$01
	CALL $1601
	CALL $0D6E
	LD A,1
	LD ($5C3A),A
	LD HL,STRING_63	;x=
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_x)
	CALL runtimePrintInt
	LD HL,STRING_77	; y=
	CALL runtimePrintString
	CALL runtimeInputInt
	LD (ZXBASIC_VAR_y),HL
	CALL $0D6E	;Clear lower screen
ZX_LINE_5530:
; 5530  PRINT "Eingabe String": INPUT  INK 5{00 00 05 00 00 };"text:";t$
; 		5530.1  PRINT "Eingabe String"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_78	;Eingabe String
	CALL runtimePrintString
	CALL runtimePrintNewline
; 		5530.2  INPUT  INK 5{00 00 05 00 00 };"text
	LD A,$01
	CALL $1601
	CALL $0D6E
	LD A,1
	LD ($5C3A),A
	LD HL,5
	CALL runtimeLocalInk
	LD HL,STRING_79	;text:
	CALL runtimePrintString
	CALL runtimeInputString
	LD DE,HL
	LD HL,ZXBASIC_VAR_t_string
	CALL runtimeStoreString
	LD A,(ZX_ATTR_P)
	LD (ZX_ATTR_T),A
	CALL $0D6E	;Clear lower screen
ZX_LINE_5540:
; 5540  PRINT "Eingabe String": INPUT (t$);" name="; LINE n$
; 		5540.1  PRINT "Eingabe String"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_78	;Eingabe String
	CALL runtimePrintString
	CALL runtimePrintNewline
; 		5540.2  INPUT (t$);" name="; LINE n$
	LD A,$01
	CALL $1601
	CALL $0D6E
	LD A,1
	LD ($5C3A),A
	LD HL,(ZXBASIC_VAR_t_string)
	CALL runtimePrintString
	LD HL,STRING_80	; name=
	CALL runtimePrintString
	CALL runtimeInputString
	LD DE,HL
	LD HL,ZXBASIC_VAR_n_string
	CALL runtimeStoreString
	CALL $0D6E	;Clear lower screen
	CALL ZXFreeTempCompact
ZX_LINE_5550:
; 5550  PRINT "Eingabe Float": INPUT "pi=";zz
; 		5550.1  PRINT "Eingabe Float"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_81	;Eingabe Float
	CALL runtimePrintString
	CALL runtimePrintNewline
; 		5550.2  INPUT "pi=";zz
	LD A,$01
	CALL $1601
	CALL $0D6E
	LD A,1
	LD ($5C3A),A
	LD HL,STRING_49	;pi=
	CALL runtimePrintString
	CALL runtimeInputInt
	LD (ZXBASIC_VAR_zz),HL
	CALL $0D6E	;Clear lower screen
ZX_LINE_5560:
; 5560  PRINT "x=";x,"y=";y
; 		5560.1  PRINT "x=";x,"y=";y
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_63	;x=
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_x)
	CALL runtimePrintInt
	CALL runtimePrintTab
	LD HL,STRING_82	;y=
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_y)
	CALL runtimePrintInt
	CALL runtimePrintNewline
ZX_LINE_5570:
; 5570  PRINT "t$=";t$: PRINT "n$=";n$
; 		5570.1  PRINT "t$=";t$
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_83	;t$=
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_t_string)
	CALL runtimePrintString
	CALL runtimePrintNewline
	CALL ZXFreeTempCompact
; 		5570.2  PRINT "n$=";n$
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_84	;n$=
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_n_string)
	CALL runtimePrintString
	CALL runtimePrintNewline
	CALL ZXFreeTempCompact
ZX_LINE_5580:
; 5580  PRINT "zz=";zz
; 		5580.1  PRINT "zz=";zz
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_51	;zz=
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_zz)
	CALL runtimePrintInt
	CALL runtimePrintNewline
ZX_LINE_5599:
; 5599  GOTO 3600{00 00 10 0e 00 }
; 		5599.1  GOTO 3600{00 00 10 0e 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3600
ZX_LINE_5600:
; 5600   CLS : PRINT "string to float"
; 		5600.1  CLS 
	CALL runtimeCls
; 		5600.2  PRINT "string to float"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_85	;string to float
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_5610:
; 5610  LET f1=0{00 00 00 00 00 }: LET f2=0.1{7d 4c cc cc cc }
; 		5610.1  LET f1=0{00 00 00 00 00 }
	LD HL,0
	CALL runtimeIntToFloat
	LD HL,ZXBASIC_VAR_f1
	CALL runtimeStoreFloat
; 		5610.2  LET f2=0.1{7d 4c cc cc cc }
	LD HL,FLOAT_10	;0.1
	LD DE,ZXBASIC_VAR_f2
	LD BC,5
	LDIR
ZX_LINE_5620:
; 5620  LET a$="123.456"
; 		5620.1  LET a$="123.456"
	LD DE,STRING_86	;123.456
	LD HL,ZXBASIC_VAR_a_string
	CALL runtimeStoreString
ZX_LINE_5630:
; 5630  LET i=1{00 00 01 00 00 }
; 		5630.1  LET i=1{00 00 01 00 00 }
	LD HL,1
	LD (ZXBASIC_VAR_i),HL
ZX_LINE_5640:
; 5640  IF i> LEN a$ THEN  GOTO 5800{00 00 a8 16 00 }
; 		5640.1  IF i> LEN a$ THEN  GOTO 5800{00 00 a8 16 00 }
	LD HL,(ZXBASIC_VAR_i)
	PUSH HL
	LD HL,(ZXBASIC_VAR_a_string)
	CALL runtimeLen
	POP DE
	SUB HL,DE
	LD HL,0
	call c,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_29
; 		5640.2  GOTO 5800{00 00 a8 16 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_5800
ZXB_LABEL_29:
ZX_LINE_5641:
; 5641  LET char= CODE a$(i)
; 		5641.1  LET char= CODE a$(i)
	LD HL,(ZXBASIC_VAR_a_string)
	PUSH HL
	LD HL,(ZXBASIC_VAR_i)
	POP BC
	CALL runtimeCharAt
	CALL runtimeCode
	LD (ZXBASIC_VAR_char),HL
	CALL ZXFreeTempCompact
ZX_LINE_5645:
; 5645  IF char=46{00 00 2e 00 00 } THEN  GOTO 5700{00 00 44 16 00 }
; 		5645.1  IF char=46{00 00 2e 00 00 } THEN  GOTO 5700{00 00 44 16 00 }
	LD DE,(ZXBASIC_VAR_char)
	LD HL,46
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_30
; 		5645.2  GOTO 5700{00 00 44 16 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_5700
ZXB_LABEL_30:
ZX_LINE_5650:
; 5650  IF char<48{00 00 30 00 00 } ORX char>58{00 00 3a 00 00 } THEN  GOTO 5800{00 00 a8 16 00 }
; 		5650.1  IF char<48{00 00 30 00 00 } ORX char>58{00 00 3a 00 00 } THEN  GOTO 5800{00 00 a8 16 00 }
	LD DE,(ZXBASIC_VAR_char)
	LD HL,48
	SUB HL,DE
	LD HL,0
	call nc,HL1
	PUSH HL
	LD DE,(ZXBASIC_VAR_char)
	LD HL,58
	SUB HL,DE
	LD HL,0
	call c,HL1
	POP DE
	LD A,L
	OR E
	LD L,A
	LD H,0
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_31
; 		5650.2  GOTO 5800{00 00 a8 16 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_5800
ZXB_LABEL_31:
ZX_LINE_5660:
; 5660  LET f1=f1*10{00 00 0a 00 00 }+(char-48{00 00 30 00 00 })
; 		5660.1  LET f1=f1*10{00 00 0a 00 00 }+(char-48{00 00 30 00 00 })
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	LD HL,10
	CALL runtimeIntToFloat
	RST $28
	DB $04	;MULT
	DB $38	;END CALC
	LD HL,(ZXBASIC_VAR_char)
	LD DE,48
	SUB HL,DE
	CALL runtimeIntToFloat
	CALL runtimePlusFloat
	LD HL,ZXBASIC_VAR_f1
	CALL runtimeStoreFloat
ZX_LINE_5670:
; 5670  LET i=i+1{00 00 01 00 00 }: GOTO 5640{00 00 08 16 00 }
; 		5670.1  LET i=i+1{00 00 01 00 00 }
	LD HL,(ZXBASIC_VAR_i)
	INC HL
	LD (ZXBASIC_VAR_i),HL
; 		5670.2  GOTO 5640{00 00 08 16 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_5640
ZX_LINE_5700:
; 5700  LET i=i+1{00 00 01 00 00 }
; 		5700.1  LET i=i+1{00 00 01 00 00 }
	LD HL,(ZXBASIC_VAR_i)
	INC HL
	LD (ZXBASIC_VAR_i),HL
ZX_LINE_5705:
; 5705  IF i> LEN a$ THEN  GOTO 5800{00 00 a8 16 00 }
; 		5705.1  IF i> LEN a$ THEN  GOTO 5800{00 00 a8 16 00 }
	LD HL,(ZXBASIC_VAR_i)
	PUSH HL
	LD HL,(ZXBASIC_VAR_a_string)
	CALL runtimeLen
	POP DE
	SUB HL,DE
	LD HL,0
	call c,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_32
; 		5705.2  GOTO 5800{00 00 a8 16 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_5800
ZXB_LABEL_32:
ZX_LINE_5710:
; 5710  LET char= CODE a$(i)
; 		5710.1  LET char= CODE a$(i)
	LD HL,(ZXBASIC_VAR_a_string)
	PUSH HL
	LD HL,(ZXBASIC_VAR_i)
	POP BC
	CALL runtimeCharAt
	CALL runtimeCode
	LD (ZXBASIC_VAR_char),HL
	CALL ZXFreeTempCompact
ZX_LINE_5720:
; 5720  LET f1=f1+f2*(char-48{00 00 30 00 00 })
; 		5720.1  LET f1=f1+f2*(char-48{00 00 30 00 00 })
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	LD HL,(ZXBASIC_VAR_char)
	LD DE,48
	SUB HL,DE
	CALL runtimeIntToFloat
	RST $28
	DB $04	;MULT
; END CALC
	DB $0f	;ADD
	DB $38	;END CALC
	LD HL,ZXBASIC_VAR_f1
	CALL runtimeStoreFloat
ZX_LINE_5735:
; 5735  LET f2=f2/10{00 00 0a 00 00 }
; 		5735.1  LET f2=f2/10{00 00 0a 00 00 }
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	LD HL,10
	CALL runtimeIntToFloat
	RST $28
	DB $05	;DIV
	DB $38	;END CALC
	LD HL,ZXBASIC_VAR_f2
	CALL runtimeStoreFloat
ZX_LINE_5740:
; 5740  GOTO 5700{00 00 44 16 00 }
; 		5740.1  GOTO 5700{00 00 44 16 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_5700
ZX_LINE_5800:
; 5800  PRINT a$;" = ";f1
; 		5800.1  PRINT a$;" = ";f1
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,(ZXBASIC_VAR_a_string)
	CALL runtimePrintString
	LD HL,STRING_87	; = 
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	CALL runtimePrintNewline
	CALL ZXFreeTempCompact
ZX_LINE_5810:
; 5810  GOTO 3600{00 00 10 0e 00 }
; 		5810.1  GOTO 3600{00 00 10 0e 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3600
ZX_LINE_5900:
; 5900  CLS : PRINT "beep and border"
; 		5900.1  CLS 
	CALL runtimeCls
; 		5900.2  PRINT "beep and border"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_88	;beep and border
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_5910:
; 5910  BEEP 1{00 00 01 00 00 },0{00 00 00 00 00 }: BEEP 1{00 00 01 00 00 },2{00 00 02 00 00 }: BEEP 0.5{7f 7f ff ff ff },3{00 00 03 00 00 }: BEEP 0.5{7f 7f ff ff ff },2{00 00 02 00 00 }: BEEP 1{00 00 01 00 00 },0{00 00 00 00 00 }
; 		5910.1  BEEP 1{00 00 01 00 00 },0{00 00 00 00 00 }
	LD HL,1
	CALL runtimeIntToFloat
	LD HL,0
	CALL runtimeIntToFloat
	CALL $03F8
; 		5910.2  BEEP 1{00 00 01 00 00 },2{00 00 02 00 00 }
	LD HL,1
	CALL runtimeIntToFloat
	LD HL,2
	CALL runtimeIntToFloat
	CALL $03F8
; 		5910.3  BEEP 0.5{7f 7f ff ff ff },3{00 00 03 00 00 }
	LD HL,FLOAT_11	;0.5
	CALL runtimePushFloatVar
	LD HL,3
	CALL runtimeIntToFloat
	CALL $03F8
; 		5910.4  BEEP 0.5{7f 7f ff ff ff },2{00 00 02 00 00 }
	LD HL,FLOAT_11	;0.5
	CALL runtimePushFloatVar
	LD HL,2
	CALL runtimeIntToFloat
	CALL $03F8
; 		5910.5  BEEP 1{00 00 01 00 00 },0{00 00 00 00 00 }
	LD HL,1
	CALL runtimeIntToFloat
	LD HL,0
	CALL runtimeIntToFloat
	CALL $03F8
ZX_LINE_5920:
; 5920  BEEP 1{00 00 01 00 00 },0{00 00 00 00 00 }: BEEP 1{00 00 01 00 00 },2{00 00 02 00 00 }: BEEP 0.5{7f 7f ff ff ff },3{00 00 03 00 00 }: BEEP 0.5{7f 7f ff ff ff },2{00 00 02 00 00 }: BEEP 1{00 00 01 00 00 },0{00 00 00 00 00 }
; 		5920.1  BEEP 1{00 00 01 00 00 },0{00 00 00 00 00 }
	LD HL,1
	CALL runtimeIntToFloat
	LD HL,0
	CALL runtimeIntToFloat
	CALL $03F8
; 		5920.2  BEEP 1{00 00 01 00 00 },2{00 00 02 00 00 }
	LD HL,1
	CALL runtimeIntToFloat
	LD HL,2
	CALL runtimeIntToFloat
	CALL $03F8
; 		5920.3  BEEP 0.5{7f 7f ff ff ff },3{00 00 03 00 00 }
	LD HL,FLOAT_11	;0.5
	CALL runtimePushFloatVar
	LD HL,3
	CALL runtimeIntToFloat
	CALL $03F8
; 		5920.4  BEEP 0.5{7f 7f ff ff ff },2{00 00 02 00 00 }
	LD HL,FLOAT_11	;0.5
	CALL runtimePushFloatVar
	LD HL,2
	CALL runtimeIntToFloat
	CALL $03F8
; 		5920.5  BEEP 1{00 00 01 00 00 },0{00 00 00 00 00 }
	LD HL,1
	CALL runtimeIntToFloat
	LD HL,0
	CALL runtimeIntToFloat
	CALL $03F8
ZX_LINE_5930:
; 5930  BEEP 1{00 00 01 00 00 },3{00 00 03 00 00 }: BEEP 1{00 00 01 00 00 },5{00 00 05 00 00 }: BEEP 2{00 00 02 00 00 },7{00 00 07 00 00 }
; 		5930.1  BEEP 1{00 00 01 00 00 },3{00 00 03 00 00 }
	LD HL,1
	CALL runtimeIntToFloat
	LD HL,3
	CALL runtimeIntToFloat
	CALL $03F8
; 		5930.2  BEEP 1{00 00 01 00 00 },5{00 00 05 00 00 }
	LD HL,1
	CALL runtimeIntToFloat
	LD HL,5
	CALL runtimeIntToFloat
	CALL $03F8
; 		5930.3  BEEP 2{00 00 02 00 00 },7{00 00 07 00 00 }
	LD HL,2
	CALL runtimeIntToFloat
	LD HL,7
	CALL runtimeIntToFloat
	CALL $03F8
ZX_LINE_5940:
; 5940  BEEP 1{00 00 01 00 00 },3{00 00 03 00 00 }: BEEP 1{00 00 01 00 00 },5{00 00 05 00 00 }: BEEP 2{00 00 02 00 00 },7{00 00 07 00 00 }
; 		5940.1  BEEP 1{00 00 01 00 00 },3{00 00 03 00 00 }
	LD HL,1
	CALL runtimeIntToFloat
	LD HL,3
	CALL runtimeIntToFloat
	CALL $03F8
; 		5940.2  BEEP 1{00 00 01 00 00 },5{00 00 05 00 00 }
	LD HL,1
	CALL runtimeIntToFloat
	LD HL,5
	CALL runtimeIntToFloat
	CALL $03F8
; 		5940.3  BEEP 2{00 00 02 00 00 },7{00 00 07 00 00 }
	LD HL,2
	CALL runtimeIntToFloat
	LD HL,7
	CALL runtimeIntToFloat
	CALL $03F8
ZX_LINE_5950:
; 5950  BEEP 0.75{80 40 00 00 00 },7{00 00 07 00 00 }: BEEP 0.25{7e 7f ff ff ff },8{00 00 08 00 00 }: BEEP 0.5{7f 7f ff ff ff },7{00 00 07 00 00 }: BEEP 0.5{7f 7f ff ff ff },5{00 00 05 00 00 }: BEEP 0.5{7f 7f ff ff ff },3{00 00 03 00 00 }: BEEP 1{00 00 01 00 00 },0{00 00 00 00 00 }
; 		5950.1  BEEP 0.75{80 40 00 00 00 },7{00 00 07 00 00 }
	LD HL,FLOAT_12	;0.75
	CALL runtimePushFloatVar
	LD HL,7
	CALL runtimeIntToFloat
	CALL $03F8
; 		5950.2  BEEP 0.25{7e 7f ff ff ff },8{00 00 08 00 00 }
	LD HL,FLOAT_13	;0.25
	CALL runtimePushFloatVar
	LD HL,8
	CALL runtimeIntToFloat
	CALL $03F8
; 		5950.3  BEEP 0.5{7f 7f ff ff ff },7{00 00 07 00 00 }
	LD HL,FLOAT_11	;0.5
	CALL runtimePushFloatVar
	LD HL,7
	CALL runtimeIntToFloat
	CALL $03F8
; 		5950.4  BEEP 0.5{7f 7f ff ff ff },5{00 00 05 00 00 }
	LD HL,FLOAT_11	;0.5
	CALL runtimePushFloatVar
	LD HL,5
	CALL runtimeIntToFloat
	CALL $03F8
; 		5950.5  BEEP 0.5{7f 7f ff ff ff },3{00 00 03 00 00 }
	LD HL,FLOAT_11	;0.5
	CALL runtimePushFloatVar
	LD HL,3
	CALL runtimeIntToFloat
	CALL $03F8
; 		5950.6  BEEP 1{00 00 01 00 00 },0{00 00 00 00 00 }
	LD HL,1
	CALL runtimeIntToFloat
	LD HL,0
	CALL runtimeIntToFloat
	CALL $03F8
ZX_LINE_5960:
; 5960  BEEP 0.75{80 40 00 00 00 },7{00 00 07 00 00 }: BEEP 0.25{7e 7f ff ff ff },8{00 00 08 00 00 }: BEEP 0.5{7f 7f ff ff ff },7{00 00 07 00 00 }: BEEP 0.5{7f 7f ff ff ff },5{00 00 05 00 00 }: BEEP 0.5{7f 7f ff ff ff },3{00 00 03 00 00 }: BEEP 0.5{7f 7f ff ff ff },2{00 00 02 00 00 }: BEEP 1{00 00 01 00 00 },0{00 00 00 00 00 }
; 		5960.1  BEEP 0.75{80 40 00 00 00 },7{00 00 07 00 00 }
	LD HL,FLOAT_12	;0.75
	CALL runtimePushFloatVar
	LD HL,7
	CALL runtimeIntToFloat
	CALL $03F8
; 		5960.2  BEEP 0.25{7e 7f ff ff ff },8{00 00 08 00 00 }
	LD HL,FLOAT_13	;0.25
	CALL runtimePushFloatVar
	LD HL,8
	CALL runtimeIntToFloat
	CALL $03F8
; 		5960.3  BEEP 0.5{7f 7f ff ff ff },7{00 00 07 00 00 }
	LD HL,FLOAT_11	;0.5
	CALL runtimePushFloatVar
	LD HL,7
	CALL runtimeIntToFloat
	CALL $03F8
; 		5960.4  BEEP 0.5{7f 7f ff ff ff },5{00 00 05 00 00 }
	LD HL,FLOAT_11	;0.5
	CALL runtimePushFloatVar
	LD HL,5
	CALL runtimeIntToFloat
	CALL $03F8
; 		5960.5  BEEP 0.5{7f 7f ff ff ff },3{00 00 03 00 00 }
	LD HL,FLOAT_11	;0.5
	CALL runtimePushFloatVar
	LD HL,3
	CALL runtimeIntToFloat
	CALL $03F8
; 		5960.6  BEEP 0.5{7f 7f ff ff ff },2{00 00 02 00 00 }
	LD HL,FLOAT_11	;0.5
	CALL runtimePushFloatVar
	LD HL,2
	CALL runtimeIntToFloat
	CALL $03F8
; 		5960.7  BEEP 1{00 00 01 00 00 },0{00 00 00 00 00 }
	LD HL,1
	CALL runtimeIntToFloat
	LD HL,0
	CALL runtimeIntToFloat
	CALL $03F8
ZX_LINE_5970:
; 5970  BEEP 1{00 00 01 00 00 },0{00 00 00 00 00 }: BEEP 1{00 00 01 00 00 },0.0{00 00 00 00 00 }-5.0{00 00 05 00 00 }: BEEP 2{00 00 02 00 00 },0{00 00 00 00 00 }
; 		5970.1  BEEP 1{00 00 01 00 00 },0{00 00 00 00 00 }
	LD HL,1
	CALL runtimeIntToFloat
	LD HL,0
	CALL runtimeIntToFloat
	CALL $03F8
; 		5970.2  BEEP 1{00 00 01 00 00 },0.0{00 00 00 00 00 }-5.0{00 00 05 00 00 }
	LD HL,1
	CALL runtimeIntToFloat
	LD HL,FLOAT_5	;0.0
	CALL runtimePushFloatVar
	LD HL,FLOAT_3	;5.0
	CALL runtimePushFloatVar
	RST $28
	DB $03	;SUB
	DB $38	;END CALC
	CALL $03F8
; 		5970.3  BEEP 2{00 00 02 00 00 },0{00 00 00 00 00 }
	LD HL,2
	CALL runtimeIntToFloat
	LD HL,0
	CALL runtimeIntToFloat
	CALL $03F8
ZX_LINE_5980:
; 5980  BEEP 1{00 00 01 00 00 },0{00 00 00 00 00 }: BEEP 1{00 00 01 00 00 },0.0{00 00 00 00 00 }-5.0{00 00 05 00 00 }: BEEP 2{00 00 02 00 00 },0{00 00 00 00 00 }
; 		5980.1  BEEP 1{00 00 01 00 00 },0{00 00 00 00 00 }
	LD HL,1
	CALL runtimeIntToFloat
	LD HL,0
	CALL runtimeIntToFloat
	CALL $03F8
; 		5980.2  BEEP 1{00 00 01 00 00 },0.0{00 00 00 00 00 }-5.0{00 00 05 00 00 }
	LD HL,1
	CALL runtimeIntToFloat
	LD HL,FLOAT_5	;0.0
	CALL runtimePushFloatVar
	LD HL,FLOAT_3	;5.0
	CALL runtimePushFloatVar
	RST $28
	DB $03	;SUB
	DB $38	;END CALC
	CALL $03F8
; 		5980.3  BEEP 2{00 00 02 00 00 },0{00 00 00 00 00 }
	LD HL,2
	CALL runtimeIntToFloat
	LD HL,0
	CALL runtimeIntToFloat
	CALL $03F8
ZX_LINE_5990:
; 5990  FOR i=1{00 00 01 00 00 } TO 5000{00 00 88 13 00 }: FOR j=0{00 00 00 00 00 } TO 7{00 00 07 00 00 }: BORDER j: NEXT j: NEXT i
; 		5990.1  FOR i=1{00 00 01 00 00 } TO 5000{00 00 88 13 00 }
	CALL runtimeCheckBreak
	LD HL,1
	LD (ZXBASIC_VAR_i),HL
	LD HL,5000
	LD (ZXBASIC_VAR_for_i),HL
FOR_28:
; 		5990.2  FOR j=0{00 00 00 00 00 } TO 7{00 00 07 00 00 }
	CALL runtimeCheckBreak
	LD HL,0
	LD (ZXBASIC_VAR_j),HL
	LD HL,7
	LD (ZXBASIC_VAR_for_j),HL
FOR_29:
; 		5990.3  BORDER j
	LD HL,(ZXBASIC_VAR_j)
	PUSH HL
	LD A,L
	call $2297
; 		5990.4  NEXT j
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_j)
	INC HL
	LD (ZXBASIC_VAR_j),HL
	LD DE,(ZXBASIC_VAR_for_j)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_29
; 		5990.5  NEXT i
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_i)
	INC HL
	LD (ZXBASIC_VAR_i),HL
	LD DE,(ZXBASIC_VAR_for_i)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_28
ZX_LINE_5995:
; 5995  GOTO 3600{00 00 10 0e 00 }
; 		5995.1  GOTO 3600{00 00 10 0e 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3600
ZX_LINE_6000:
; 6000  CLS : PRINT "rnd and randomize"
; 		6000.1  CLS 
	CALL runtimeCls
; 		6000.2  PRINT "rnd and randomize"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_89	;rnd and randomize
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_6010:
; 6010  FOR i=1{00 00 01 00 00 } TO 10000{00 00 10 27 00 }
; 		6010.1  FOR i=1{00 00 01 00 00 } TO 10000{00 00 10 27 00 }
	CALL runtimeCheckBreak
	LD HL,1
	LD (ZXBASIC_VAR_i),HL
	LD HL,10000
	LD (ZXBASIC_VAR_for_i),HL
FOR_30:
ZX_LINE_6020:
; 6020  LET x= RND *255.0{00 00 ff 00 00 }
; 		6020.1  LET x= RND *255.0{00 00 ff 00 00 }
	CALL runtimeRND
	LD HL,FLOAT_14	;255.0
	CALL runtimePushFloatVar
	RST $28
	DB $04	;MULT
	DB $38	;END CALC
	CALL runtimeFloatToInt
	LD (ZXBASIC_VAR_x),HL
ZX_LINE_6030:
; 6030  LET y= RND *150.0{00 00 96 00 00 }
; 		6030.1  LET y= RND *150.0{00 00 96 00 00 }
	CALL runtimeRND
	LD HL,FLOAT_15	;150.0
	CALL runtimePushFloatVar
	RST $28
	DB $04	;MULT
	DB $38	;END CALC
	CALL runtimeFloatToInt
	LD (ZXBASIC_VAR_y),HL
ZX_LINE_6040:
; 6040  PLOT x,y
; 		6040.1  PLOT x,y
	LD DE,(ZXBASIC_VAR_x)
	LD HL,(ZXBASIC_VAR_y)
	CALL runtimePlot
ZX_LINE_6050:
; 6050  NEXT i
; 		6050.1  NEXT i
	CALL runtimeCheckBreak
	LD HL,(ZXBASIC_VAR_i)
	INC HL
	LD (ZXBASIC_VAR_i),HL
	LD DE,(ZXBASIC_VAR_for_i)
	EX HL,DE
	SUB HL,DE
	JP NC,FOR_30
ZX_LINE_6060:
; 6060  GOTO 3600{00 00 10 0e 00 }
; 		6060.1  GOTO 3600{00 00 10 0e 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3600
ZX_LINE_6100:
; 6100  CLS : PRINT "Vergleiche: float"
; 		6100.1  CLS 
	CALL runtimeCls
; 		6100.2  PRINT "Vergleiche
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_90	;Vergleiche: float
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_6110:
; 6110  LET f1=1.2{81 19 99 99 9a }: LET f2=0{00 00 00 00 00 }: GOSUB 6150{00 00 06 18 00 }
; 		6110.1  LET f1=1.2{81 19 99 99 9a }
	LD HL,FLOAT_16	;1.2
	LD DE,ZXBASIC_VAR_f1
	LD BC,5
	LDIR
; 		6110.2  LET f2=0{00 00 00 00 00 }
	LD HL,0
	CALL runtimeIntToFloat
	LD HL,ZXBASIC_VAR_f2
	CALL runtimeStoreFloat
; 		6110.3  GOSUB 6150{00 00 06 18 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_6150:
ZX_LINE_6111:
; 6111  LET f1=1.2{81 19 99 99 9a }: LET f2=2.3{82 13 33 33 33 }: GOSUB 6150{00 00 06 18 00 }
; 		6111.1  LET f1=1.2{81 19 99 99 9a }
	LD HL,FLOAT_16	;1.2
	LD DE,ZXBASIC_VAR_f1
	LD BC,5
	LDIR
; 		6111.2  LET f2=2.3{82 13 33 33 33 }
	LD HL,FLOAT_17	;2.3
	LD DE,ZXBASIC_VAR_f2
	LD BC,5
	LDIR
; 		6111.3  GOSUB 6150{00 00 06 18 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_6150:
ZX_LINE_6112:
; 6112  LET f1=2.3{82 13 33 33 33 }: LET f2=1.2{81 19 99 99 9a }: GOSUB 6150{00 00 06 18 00 }
; 		6112.1  LET f1=2.3{82 13 33 33 33 }
	LD HL,FLOAT_17	;2.3
	LD DE,ZXBASIC_VAR_f1
	LD BC,5
	LDIR
; 		6112.2  LET f2=1.2{81 19 99 99 9a }
	LD HL,FLOAT_16	;1.2
	LD DE,ZXBASIC_VAR_f2
	LD BC,5
	LDIR
; 		6112.3  GOSUB 6150{00 00 06 18 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_6150:
ZX_LINE_6115:
; 6115   LET f1=10{00 00 0a 00 00 }: LET f2=10{00 00 0a 00 00 }: GOSUB 6150{00 00 06 18 00 }
; 		6115.1  LET f1=10{00 00 0a 00 00 }
	LD HL,10
	CALL runtimeIntToFloat
	LD HL,ZXBASIC_VAR_f1
	CALL runtimeStoreFloat
; 		6115.2  LET f2=10{00 00 0a 00 00 }
	LD HL,10
	CALL runtimeIntToFloat
	LD HL,ZXBASIC_VAR_f2
	CALL runtimeStoreFloat
; 		6115.3  GOSUB 6150{00 00 06 18 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_6150:
ZX_LINE_6120:
; 6120  LET f1=20{00 00 14 00 00 }: LET f2=10{00 00 0a 00 00 }: GOSUB 6150{00 00 06 18 00 }
; 		6120.1  LET f1=20{00 00 14 00 00 }
	LD HL,20
	CALL runtimeIntToFloat
	LD HL,ZXBASIC_VAR_f1
	CALL runtimeStoreFloat
; 		6120.2  LET f2=10{00 00 0a 00 00 }
	LD HL,10
	CALL runtimeIntToFloat
	LD HL,ZXBASIC_VAR_f2
	CALL runtimeStoreFloat
; 		6120.3  GOSUB 6150{00 00 06 18 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_6150:
ZX_LINE_6125:
; 6125  LET f1=10{00 00 0a 00 00 }: LET f2=20{00 00 14 00 00 }: GOSUB 6150{00 00 06 18 00 }
; 		6125.1  LET f1=10{00 00 0a 00 00 }
	LD HL,10
	CALL runtimeIntToFloat
	LD HL,ZXBASIC_VAR_f1
	CALL runtimeStoreFloat
; 		6125.2  LET f2=20{00 00 14 00 00 }
	LD HL,20
	CALL runtimeIntToFloat
	LD HL,ZXBASIC_VAR_f2
	CALL runtimeStoreFloat
; 		6125.3  GOSUB 6150{00 00 06 18 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_6150:
ZX_LINE_6130:
; 6130  PRINT : GOSUB 3600{00 00 10 0e 00 }: GOTO 6300{00 00 9c 18 00 }
; 		6130.1  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
; 		6130.2  GOSUB 3600{00 00 10 0e 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_3600:
; 		6130.3  GOTO 6300{00 00 9c 18 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_6300
ZX_LINE_6140:
; 6140  PRINT "f1=";f1;" f2=";f2;" f3=";f3
; 		6140.1  PRINT "f1=";f1;" f2=";f2;" f3=";f3
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_52	;f1=
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	LD HL,STRING_53	; f2=
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	LD HL,STRING_91	; f3=
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_f3
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	CALL runtimePrintNewline
ZX_LINE_6150:
; 6150  PRINT "-------  f1-f2=";f1-f2
; 		6150.1  PRINT "-------  f1-f2=";f1-f2
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_92	;-------  f1-f2=
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	RST $28
	DB $03	;SUB
	DB $38	;END CALC
	CALL runtimePrintFloat
	CALL runtimePrintNewline
ZX_LINE_6170:
; 6170  PRINT f1=f2;":";f1;"=";f2;" ";: IF f1=f2 THEN  PRINT "ja";
; 		6170.1  PRINT f1=f2;"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	CALL runtimeEqualFloat
	CALL runtimePrintInt
	LD HL,STRING_33	;:
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	LD HL,STRING_39	;=
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	LD HL,STRING_35	; 
	CALL runtimePrintString
; 		6170.2  IF f1=f2 THEN  PRINT "ja";
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	CALL runtimeEqualFloat
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_33
; 		6170.3  PRINT "ja";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_93	;ja
	CALL runtimePrintString
ZXB_LABEL_33:
ZX_LINE_6175:
; 6175  PRINT ,
; 		6175.1  PRINT ,
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintTab
ZX_LINE_6180:
; 6180  PRINT f1 <> f2;":";f1;" <> ";f2;" ";: IF f1 <> f2 THEN  PRINT "ja";
; 		6180.1  PRINT f1 <> f2;"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	CALL runtimeUnequalFloat
	CALL runtimePrintInt
	LD HL,STRING_33	;:
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	LD HL,STRING_94	;\c9
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	LD HL,STRING_35	; 
	CALL runtimePrintString
; 		6180.2  IF f1 <> f2 THEN  PRINT "ja";
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	CALL runtimeUnequalFloat
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_34
; 		6180.3  PRINT "ja";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_93	;ja
	CALL runtimePrintString
ZXB_LABEL_34:
ZX_LINE_6185:
; 6185  PRINT 
; 		6185.1  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
ZX_LINE_6190:
; 6190  PRINT f1 <= f2;":";f1;" <= ";f2;" ";: IF f1 <= f2 THEN  PRINT "ja";
; 		6190.1  PRINT f1 <= f2;"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	CALL runtimeSmallerEqualFloat
	CALL runtimePrintInt
	LD HL,STRING_33	;:
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	LD HL,STRING_95	;\c7
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	LD HL,STRING_35	; 
	CALL runtimePrintString
; 		6190.2  IF f1 <= f2 THEN  PRINT "ja";
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	CALL runtimeSmallerEqualFloat
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_35
; 		6190.3  PRINT "ja";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_93	;ja
	CALL runtimePrintString
ZXB_LABEL_35:
ZX_LINE_6195:
; 6195  PRINT ,
; 		6195.1  PRINT ,
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintTab
ZX_LINE_6200:
; 6200  PRINT f1 >= f2;":";f1;" >= ";f2;" ";: IF f1 >= f2 THEN  PRINT "ja";
; 		6200.1  PRINT f1 >= f2;"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	CALL runtimeBiggerEqualFloat
	CALL runtimePrintInt
	LD HL,STRING_33	;:
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	LD HL,STRING_96	;\c8
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	LD HL,STRING_35	; 
	CALL runtimePrintString
; 		6200.2  IF f1 >= f2 THEN  PRINT "ja";
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	CALL runtimeBiggerEqualFloat
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_36
; 		6200.3  PRINT "ja";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_93	;ja
	CALL runtimePrintString
ZXB_LABEL_36:
ZX_LINE_6205:
; 6205  PRINT 
; 		6205.1  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
ZX_LINE_6210:
; 6210  PRINT f1<f2;":";f1;"<";f2;" ";: IF f1<f2 THEN  PRINT "ja";
; 		6210.1  PRINT f1<f2;"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	CALL runtimeSmallerFloat
	CALL runtimePrintInt
	LD HL,STRING_33	;:
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	LD HL,STRING_97	;<
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	LD HL,STRING_35	; 
	CALL runtimePrintString
; 		6210.2  IF f1<f2 THEN  PRINT "ja";
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	CALL runtimeSmallerFloat
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_37
; 		6210.3  PRINT "ja";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_93	;ja
	CALL runtimePrintString
ZXB_LABEL_37:
ZX_LINE_6215:
; 6215  PRINT ,
; 		6215.1  PRINT ,
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintTab
ZX_LINE_6220:
; 6220  PRINT f1>f2;":";f1;">";f2;" ";: IF f1>f2 THEN  PRINT "ja";
; 		6220.1  PRINT f1>f2;"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	CALL runtimeBiggerFloat
	CALL runtimePrintInt
	LD HL,STRING_33	;:
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	LD HL,STRING_98	;>
	CALL runtimePrintString
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	CALL runtimePrintFloat
	LD HL,STRING_35	; 
	CALL runtimePrintString
; 		6220.2  IF f1>f2 THEN  PRINT "ja";
	LD HL,ZXBASIC_VAR_f1
	CALL runtimePushFloatVar
	LD HL,ZXBASIC_VAR_f2
	CALL runtimePushFloatVar
	CALL runtimeBiggerFloat
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_38
; 		6220.3  PRINT "ja";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_93	;ja
	CALL runtimePrintString
ZXB_LABEL_38:
ZX_LINE_6225:
; 6225  PRINT 
; 		6225.1  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
ZX_LINE_6230:
; 6230  RETURN 
; 		6230.1  RETURN 
	CALL runtimeCheckBreak
	RET
ZX_LINE_6300:
; 6300  CLS : PRINT "Integer"
; 		6300.1  CLS 
	CALL runtimeCls
; 		6300.2  PRINT "Integer"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_67	;Integer
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_6310:
; 6310  LET a1=1{00 00 01 00 00 }: LET a2=0{00 00 00 00 00 }: GOSUB 6400{00 00 00 19 00 }
; 		6310.1  LET a1=1{00 00 01 00 00 }
	LD HL,1
	LD (ZXBASIC_VAR_a1),HL
; 		6310.2  LET a2=0{00 00 00 00 00 }
	LD HL,0
	LD (ZXBASIC_VAR_a2),HL
; 		6310.3  GOSUB 6400{00 00 00 19 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_6400:
ZX_LINE_6320:
; 6320  LET a1=10{00 00 0a 00 00 }: LET a2=20{00 00 14 00 00 }: GOSUB 6400{00 00 00 19 00 }
; 		6320.1  LET a1=10{00 00 0a 00 00 }
	LD HL,10
	LD (ZXBASIC_VAR_a1),HL
; 		6320.2  LET a2=20{00 00 14 00 00 }
	LD HL,20
	LD (ZXBASIC_VAR_a2),HL
; 		6320.3  GOSUB 6400{00 00 00 19 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_6400:
ZX_LINE_6330:
; 6330  LET a1=20{00 00 14 00 00 }: LET a2=10{00 00 0a 00 00 }: GOSUB 6400{00 00 00 19 00 }
; 		6330.1  LET a1=20{00 00 14 00 00 }
	LD HL,20
	LD (ZXBASIC_VAR_a1),HL
; 		6330.2  LET a2=10{00 00 0a 00 00 }
	LD HL,10
	LD (ZXBASIC_VAR_a2),HL
; 		6330.3  GOSUB 6400{00 00 00 19 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_6400:
ZX_LINE_6340:
; 6340  LET a1=20{00 00 14 00 00 }: LET a2=20{00 00 14 00 00 }: GOSUB 6400{00 00 00 19 00 }
; 		6340.1  LET a1=20{00 00 14 00 00 }
	LD HL,20
	LD (ZXBASIC_VAR_a1),HL
; 		6340.2  LET a2=20{00 00 14 00 00 }
	LD (ZXBASIC_VAR_a2),HL
; 		6340.3  GOSUB 6400{00 00 00 19 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_6400:
ZX_LINE_6390:
; 6390  PRINT : GOSUB 3600{00 00 10 0e 00 }: GOTO 6600{00 00 c8 19 00 }
; 		6390.1  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
; 		6390.2  GOSUB 3600{00 00 10 0e 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_3600:
; 		6390.3  GOTO 6600{00 00 c8 19 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_6600
ZX_LINE_6400:
; 6400  PRINT "---- ";a1;"-";a2;"=";a1-a2
; 		6400.1  PRINT "---- ";a1;"-";a2;"=";a1-a2
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_99	;---- 
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_a1)
	CALL runtimePrintInt
	LD HL,STRING_100	;-
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_a2)
	CALL runtimePrintInt
	LD HL,STRING_39	;=
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_a1)
	LD DE,(ZXBASIC_VAR_a2)
	SUB HL,DE
	CALL runtimePrintInt
	CALL runtimePrintNewline
ZX_LINE_6510:
; 6510  PRINT a1=a2;":";a1;"=";a2;" ";: IF a1=a2 THEN  PRINT "ja";
; 		6510.1  PRINT a1=a2;"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,(ZXBASIC_VAR_a1)
	LD HL,(ZXBASIC_VAR_a2)
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	CALL runtimePrintInt
	LD HL,STRING_33	;:
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_a1)
	CALL runtimePrintInt
	LD HL,STRING_39	;=
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_a2)
	CALL runtimePrintInt
	LD HL,STRING_35	; 
	CALL runtimePrintString
; 		6510.2  IF a1=a2 THEN  PRINT "ja";
	LD DE,(ZXBASIC_VAR_a1)
	LD HL,(ZXBASIC_VAR_a2)
	SUB HL,DE
	LD HL,0
	CALL Z,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_39
; 		6510.3  PRINT "ja";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_93	;ja
	CALL runtimePrintString
ZXB_LABEL_39:
ZX_LINE_6515:
; 6515  PRINT ,
; 		6515.1  PRINT ,
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintTab
ZX_LINE_6520:
; 6520  PRINT a1 <> a2;":";a1;" <> ";a2;" ";: IF a1 <> a2 THEN  PRINT "ja";
; 		6520.1  PRINT a1 <> a2;"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,(ZXBASIC_VAR_a1)
	LD HL,(ZXBASIC_VAR_a2)
	SUB HL,DE
	LD HL,0
	CALL NZ,HL1
	CALL runtimePrintInt
	LD HL,STRING_33	;:
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_a1)
	CALL runtimePrintInt
	LD HL,STRING_94	;\c9
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_a2)
	CALL runtimePrintInt
	LD HL,STRING_35	; 
	CALL runtimePrintString
; 		6520.2  IF a1 <> a2 THEN  PRINT "ja";
	LD DE,(ZXBASIC_VAR_a1)
	LD HL,(ZXBASIC_VAR_a2)
	SUB HL,DE
	LD HL,0
	CALL NZ,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_40
; 		6520.3  PRINT "ja";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_93	;ja
	CALL runtimePrintString
ZXB_LABEL_40:
ZX_LINE_6525:
; 6525  PRINT 
; 		6525.1  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
ZX_LINE_6530:
; 6530  PRINT a1 <= a2;":";a1;" <= ";a2;" ";: IF a1 <= a2 THEN  PRINT "ja";
; 		6530.1  PRINT a1 <= a2;"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,(ZXBASIC_VAR_a1)
	LD HL,(ZXBASIC_VAR_a2)
	SUB HL,DE
	LD HL,0
	call nc,HL1
	call z,HL1
	CALL runtimePrintInt
	LD HL,STRING_33	;:
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_a1)
	CALL runtimePrintInt
	LD HL,STRING_95	;\c7
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_a2)
	CALL runtimePrintInt
	LD HL,STRING_35	; 
	CALL runtimePrintString
; 		6530.2  IF a1 <= a2 THEN  PRINT "ja";
	LD DE,(ZXBASIC_VAR_a1)
	LD HL,(ZXBASIC_VAR_a2)
	SUB HL,DE
	LD HL,0
	call nc,HL1
	call z,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_41
; 		6530.3  PRINT "ja";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_93	;ja
	CALL runtimePrintString
ZXB_LABEL_41:
ZX_LINE_6535:
; 6535  PRINT ,
; 		6535.1  PRINT ,
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintTab
ZX_LINE_6540:
; 6540  PRINT a1 >= a2;":";a1;" >= ";a2;" ";: IF a1 >= a2 THEN  PRINT "ja";
; 		6540.1  PRINT a1 >= a2;"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,(ZXBASIC_VAR_a1)
	LD HL,(ZXBASIC_VAR_a2)
	SUB HL,DE
	LD HL,0
	call c,HL1
	call z,HL1
	CALL runtimePrintInt
	LD HL,STRING_33	;:
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_a1)
	CALL runtimePrintInt
	LD HL,STRING_96	;\c8
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_a2)
	CALL runtimePrintInt
	LD HL,STRING_35	; 
	CALL runtimePrintString
; 		6540.2  IF a1 >= a2 THEN  PRINT "ja";
	LD DE,(ZXBASIC_VAR_a1)
	LD HL,(ZXBASIC_VAR_a2)
	SUB HL,DE
	LD HL,0
	call c,HL1
	call z,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_42
; 		6540.3  PRINT "ja";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_93	;ja
	CALL runtimePrintString
ZXB_LABEL_42:
ZX_LINE_6545:
; 6545  PRINT 
; 		6545.1  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
ZX_LINE_6550:
; 6550  PRINT a1<a2;":";a1;"<";a2;" ";: IF a1<a2 THEN  PRINT "ja";
; 		6550.1  PRINT a1<a2;"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,(ZXBASIC_VAR_a1)
	LD HL,(ZXBASIC_VAR_a2)
	SUB HL,DE
	LD HL,0
	call nc,HL1
	CALL runtimePrintInt
	LD HL,STRING_33	;:
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_a1)
	CALL runtimePrintInt
	LD HL,STRING_97	;<
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_a2)
	CALL runtimePrintInt
	LD HL,STRING_35	; 
	CALL runtimePrintString
; 		6550.2  IF a1<a2 THEN  PRINT "ja";
	LD DE,(ZXBASIC_VAR_a1)
	LD HL,(ZXBASIC_VAR_a2)
	SUB HL,DE
	LD HL,0
	call nc,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_43
; 		6550.3  PRINT "ja";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_93	;ja
	CALL runtimePrintString
ZXB_LABEL_43:
ZX_LINE_6555:
; 6555  PRINT ,
; 		6555.1  PRINT ,
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintTab
ZX_LINE_6560:
; 6560  PRINT a1>a2;":";a1;">";a2;" ";: IF a1>a2 THEN  PRINT "ja";
; 		6560.1  PRINT a1>a2;"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,(ZXBASIC_VAR_a1)
	LD HL,(ZXBASIC_VAR_a2)
	SUB HL,DE
	LD HL,0
	call c,HL1
	CALL runtimePrintInt
	LD HL,STRING_33	;:
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_a1)
	CALL runtimePrintInt
	LD HL,STRING_98	;>
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_a2)
	CALL runtimePrintInt
	LD HL,STRING_35	; 
	CALL runtimePrintString
; 		6560.2  IF a1>a2 THEN  PRINT "ja";
	LD DE,(ZXBASIC_VAR_a1)
	LD HL,(ZXBASIC_VAR_a2)
	SUB HL,DE
	LD HL,0
	call c,HL1
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_44
; 		6560.3  PRINT "ja";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_93	;ja
	CALL runtimePrintString
ZXB_LABEL_44:
ZX_LINE_6570:
; 6570  PRINT : RETURN 
; 		6570.1  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
; 		6570.2  RETURN 
	CALL runtimeCheckBreak
	RET
ZX_LINE_6600:
; 6600  CLS : PRINT "Vergleiche Strings"
; 		6600.1  CLS 
	CALL runtimeCls
; 		6600.2  PRINT "Vergleiche Strings"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_101	;Vergleiche Strings
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_6610:
; 6610  LET x$="d": LET y$="a": GOSUB 6700{00 00 2c 1a 00 }
; 		6610.1  LET x$="d"
	LD DE,STRING_102	;d
	LD HL,ZXBASIC_VAR_x_string
	CALL runtimeStoreString
; 		6610.2  LET y$="a"
	LD DE,STRING_103	;a
	LD HL,ZXBASIC_VAR_y_string
	CALL runtimeStoreString
; 		6610.3  GOSUB 6700{00 00 2c 1a 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_6700:
ZX_LINE_6620:
; 6620  LET x$="a": LET y$="d": GOSUB 6700{00 00 2c 1a 00 }
; 		6620.1  LET x$="a"
	LD DE,STRING_103	;a
	LD HL,ZXBASIC_VAR_x_string
	CALL runtimeStoreString
; 		6620.2  LET y$="d"
	LD DE,STRING_102	;d
	LD HL,ZXBASIC_VAR_y_string
	CALL runtimeStoreString
; 		6620.3  GOSUB 6700{00 00 2c 1a 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_6700:
ZX_LINE_6630:
; 6630  LET x$="a": LET y$="a": GOSUB 6700{00 00 2c 1a 00 }
; 		6630.1  LET x$="a"
	LD DE,STRING_103	;a
	LD HL,ZXBASIC_VAR_x_string
	CALL runtimeStoreString
; 		6630.2  LET y$="a"
	LD DE,STRING_103	;a
	LD HL,ZXBASIC_VAR_y_string
	CALL runtimeStoreString
; 		6630.3  GOSUB 6700{00 00 2c 1a 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_6700:
ZX_LINE_6650:
; 6650  LET x$="abc": LET y$="a": GOSUB 6700{00 00 2c 1a 00 }
; 		6650.1  LET x$="abc"
	LD DE,STRING_104	;abc
	LD HL,ZXBASIC_VAR_x_string
	CALL runtimeStoreString
; 		6650.2  LET y$="a"
	LD DE,STRING_103	;a
	LD HL,ZXBASIC_VAR_y_string
	CALL runtimeStoreString
; 		6650.3  GOSUB 6700{00 00 2c 1a 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_6700:
ZX_LINE_6660:
; 6660  LET x$="ab": LET y$="abc": GOSUB 6700{00 00 2c 1a 00 }
; 		6660.1  LET x$="ab"
	LD DE,STRING_105	;ab
	LD HL,ZXBASIC_VAR_x_string
	CALL runtimeStoreString
; 		6660.2  LET y$="abc"
	LD DE,STRING_104	;abc
	LD HL,ZXBASIC_VAR_y_string
	CALL runtimeStoreString
; 		6660.3  GOSUB 6700{00 00 2c 1a 00 }
	CALL runtimeCheckBreak
	CALL ZX_LINE_6700:
ZX_LINE_6699:
; 6699  GOTO 3600{00 00 10 0e 00 }
; 		6699.1  GOTO 3600{00 00 10 0e 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3600
ZX_LINE_6700:
; 6700  PRINT "--- x$=";x$;" y$=";y$
; 		6700.1  PRINT "--- x$=";x$;" y$=";y$
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_106	;--- x$=
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_x_string)
	CALL runtimePrintString
	LD HL,STRING_107	; y$=
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_y_string)
	CALL runtimePrintString
	CALL runtimePrintNewline
	CALL ZXFreeTempCompact
ZX_LINE_6710:
; 6710  PRINT x$=y$;":";x$;"=";y$;: IF x$=y$ THEN  PRINT "ja";
; 		6710.1  PRINT x$=y$;"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,(ZXBASIC_VAR_x_string)
	LD HL,(ZXBASIC_VAR_y_string)
	CALL runtimeEqualString
	CALL runtimePrintInt
	LD HL,STRING_33	;:
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_x_string)
	CALL runtimePrintString
	LD HL,STRING_39	;=
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_y_string)
	CALL runtimePrintString
	CALL ZXFreeTempCompact
; 		6710.2  IF x$=y$ THEN  PRINT "ja";
	LD DE,(ZXBASIC_VAR_x_string)
	LD HL,(ZXBASIC_VAR_y_string)
	CALL runtimeEqualString
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_45
; 		6710.3  PRINT "ja";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_93	;ja
	CALL runtimePrintString
ZXB_LABEL_45:
ZX_LINE_6715:
; 6715  PRINT ,
; 		6715.1  PRINT ,
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintTab
ZX_LINE_6720:
; 6720  PRINT x$ <> y$;":";x$;" <> ";y$;: IF x$ <> y$ THEN  PRINT "ja";
; 		6720.1  PRINT x$ <> y$;"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,(ZXBASIC_VAR_x_string)
	LD HL,(ZXBASIC_VAR_y_string)
	CALL runtimeUnequalString
	CALL runtimePrintInt
	LD HL,STRING_33	;:
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_x_string)
	CALL runtimePrintString
	LD HL,STRING_94	;\c9
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_y_string)
	CALL runtimePrintString
	CALL ZXFreeTempCompact
; 		6720.2  IF x$ <> y$ THEN  PRINT "ja";
	LD DE,(ZXBASIC_VAR_x_string)
	LD HL,(ZXBASIC_VAR_y_string)
	CALL runtimeUnequalString
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_46
; 		6720.3  PRINT "ja";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_93	;ja
	CALL runtimePrintString
ZXB_LABEL_46:
ZX_LINE_6725:
; 6725  PRINT 
; 		6725.1  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
ZX_LINE_6730:
; 6730  PRINT x$ <= y$;":";x$;" <= ";y$;: IF x$ <= y$ THEN  PRINT "ja";
; 		6730.1  PRINT x$ <= y$;"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,(ZXBASIC_VAR_x_string)
	LD HL,(ZXBASIC_VAR_y_string)
	CALL runtimeSmallerEqualString
	CALL runtimePrintInt
	LD HL,STRING_33	;:
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_x_string)
	CALL runtimePrintString
	LD HL,STRING_95	;\c7
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_y_string)
	CALL runtimePrintString
	CALL ZXFreeTempCompact
; 		6730.2  IF x$ <= y$ THEN  PRINT "ja";
	LD DE,(ZXBASIC_VAR_x_string)
	LD HL,(ZXBASIC_VAR_y_string)
	CALL runtimeSmallerEqualString
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_47
; 		6730.3  PRINT "ja";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_93	;ja
	CALL runtimePrintString
ZXB_LABEL_47:
ZX_LINE_6735:
; 6735  PRINT ,
; 		6735.1  PRINT ,
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintTab
ZX_LINE_6740:
; 6740  PRINT x$ >= y$;":";x$;" >= ";y$;: IF x$ >= y$ THEN  PRINT "ja";
; 		6740.1  PRINT x$ >= y$;"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,(ZXBASIC_VAR_x_string)
	LD HL,(ZXBASIC_VAR_y_string)
	CALL runtimeBiggerEqualString
	CALL runtimePrintInt
	LD HL,STRING_33	;:
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_x_string)
	CALL runtimePrintString
	LD HL,STRING_96	;\c8
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_y_string)
	CALL runtimePrintString
	CALL ZXFreeTempCompact
; 		6740.2  IF x$ >= y$ THEN  PRINT "ja";
	LD DE,(ZXBASIC_VAR_x_string)
	LD HL,(ZXBASIC_VAR_y_string)
	CALL runtimeBiggerEqualString
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_48
; 		6740.3  PRINT "ja";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_93	;ja
	CALL runtimePrintString
ZXB_LABEL_48:
ZX_LINE_6745:
; 6745  PRINT 
; 		6745.1  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
ZX_LINE_6750:
; 6750  PRINT x$>y$;":";x$;">";y$;: IF x$>y$ THEN  PRINT "ja";
; 		6750.1  PRINT x$>y$;"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,(ZXBASIC_VAR_x_string)
	LD HL,(ZXBASIC_VAR_y_string)
	CALL runtimeBiggerString
	CALL runtimePrintInt
	LD HL,STRING_33	;:
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_x_string)
	CALL runtimePrintString
	LD HL,STRING_98	;>
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_y_string)
	CALL runtimePrintString
	CALL ZXFreeTempCompact
; 		6750.2  IF x$>y$ THEN  PRINT "ja";
	LD DE,(ZXBASIC_VAR_x_string)
	LD HL,(ZXBASIC_VAR_y_string)
	CALL runtimeBiggerString
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_49
; 		6750.3  PRINT "ja";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_93	;ja
	CALL runtimePrintString
ZXB_LABEL_49:
ZX_LINE_6755:
; 6755  PRINT ,
; 		6755.1  PRINT ,
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintTab
ZX_LINE_6760:
; 6760  PRINT x$<y$;":";x$;"<";y$;: IF x$<y$ THEN  PRINT "ja";
; 		6760.1  PRINT x$<y$;"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD DE,(ZXBASIC_VAR_x_string)
	LD HL,(ZXBASIC_VAR_y_string)
	CALL runtimeSmallerString
	CALL runtimePrintInt
	LD HL,STRING_33	;:
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_x_string)
	CALL runtimePrintString
	LD HL,STRING_97	;<
	CALL runtimePrintString
	LD HL,(ZXBASIC_VAR_y_string)
	CALL runtimePrintString
	CALL ZXFreeTempCompact
; 		6760.2  IF x$<y$ THEN  PRINT "ja";
	LD DE,(ZXBASIC_VAR_x_string)
	LD HL,(ZXBASIC_VAR_y_string)
	CALL runtimeSmallerString
	LD A,L
	CP 0
	JP Z,ZXB_LABEL_50
; 		6760.3  PRINT "ja";
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_93	;ja
	CALL runtimePrintString
ZXB_LABEL_50:
ZX_LINE_6770:
; 6770  PRINT 
; 		6770.1  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
ZX_LINE_6799:
; 6799  RETURN 
; 		6799.1  RETURN 
	CALL runtimeCheckBreak
	RET
ZX_LINE_7000:
; 7000  CLS : PRINT "Funktionen": PRINT 
; 		7000.1  CLS 
	CALL runtimeCls
; 		7000.2  PRINT "Funktionen"
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_108	;Funktionen
	CALL runtimePrintString
	CALL runtimePrintNewline
; 		7000.3  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
ZX_LINE_7005:
; 7005  PRINT " DEFFN t(a,b)=a+b: DEFFN u(a,b)= FN t(a,a)+ FN t(b,b)"
; 		7005.1  PRINT " DEFFN t(a,b)=a+b
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_109	;\cet(a,b)=a+b:\ceu(a,b)=\a8t(a,a)+\a8t(b,b)
	CALL runtimePrintString
	CALL runtimePrintNewline
ZX_LINE_7007:
; 7007  PRINT : PRINT 
; 		7007.1  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
; 		7007.2  PRINT 
	XOR A,A
	LD (ZX_TV_FLAG),A
	CALL runtimePrintNewline
ZX_LINE_7010:
; 7010  PRINT " FN u(2,2)="; FN u(2{00 00 02 00 00 },2{00 00 02 00 00 }): PRINT " FN u(3,3)="; FN u(3{00 00 03 00 00 },3{00 00 03 00 00 })
; 		7010.1  PRINT " FN u(2,2)="; FN u(2{00 00 02 00 00 },2{00 00 02 00 00 })
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_110	;\a8u(2,2)=
	CALL runtimePrintString
	LD HL,2
	LD (ZXBASIC_VAR_fn_u_a),HL
	LD (ZXBASIC_VAR_fn_u_b),HL
	CALL ZX_FN_u
	CALL runtimePrintInt
	CALL runtimePrintNewline
; 		7010.2  PRINT " FN u(3,3)="; FN u(3{00 00 03 00 00 },3{00 00 03 00 00 })
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_111	;\a8u(3,3)=
	CALL runtimePrintString
	LD HL,3
	LD (ZXBASIC_VAR_fn_u_a),HL
	LD (ZXBASIC_VAR_fn_u_b),HL
	CALL ZX_FN_u
	CALL runtimePrintInt
	CALL runtimePrintNewline
ZX_LINE_7030:
; 7030  PRINT " FN t(2,3)="; FN t(2{00 00 02 00 00 },3{00 00 03 00 00 })
; 		7030.1  PRINT " FN t(2,3)="; FN t(2{00 00 02 00 00 },3{00 00 03 00 00 })
	XOR A,A
	LD (ZX_TV_FLAG),A
	LD HL,STRING_112	;\a8t(2,3)=
	CALL runtimePrintString
	LD HL,2
	LD (ZXBASIC_VAR_fn_t_a),HL
	LD HL,3
	LD (ZXBASIC_VAR_fn_t_b),HL
	CALL ZX_FN_t
	CALL runtimePrintInt
	CALL runtimePrintNewline
ZX_LINE_7050:
; 7050  GOTO 3600{00 00 10 0e 00 }
; 		7050.1  GOTO 3600{00 00 10 0e 00 }
	CALL runtimeCheckBreak
	JP ZX_LINE_3600
ZX_LINE_9990:
; 9990  STOP 
ZXBASIC_VAR_a:	defs 162
ZXBASIC_VAR_a1:	dw 0
ZXBASIC_VAR_a2:	dw 0
ZXBASIC_VAR_a_string:	dw 0
ZXBASIC_VAR_adr:	dw 0
ZXBASIC_VAR_adrl:	dw 0
ZXBASIC_VAR_af:	defs 5
ZXBASIC_VAR_ai:	dw 0
ZXBASIC_VAR_b_string:	defs 22
ZXBASIC_VAR_bf:	defs 5
ZXBASIC_VAR_bi:	dw 0
ZXBASIC_VAR_c:	dw 0
ZXBASIC_VAR_cf:	defs 5
ZXBASIC_VAR_char:	dw 0
ZXBASIC_VAR_ci:	dw 0
ZXBASIC_VAR_df:	defs 5
ZXBASIC_VAR_di:	dw 0
ZXBASIC_VAR_dx:	dw 0
ZXBASIC_VAR_dy:	dw 0
ZXBASIC_VAR_f:	defs 5
ZXBASIC_VAR_f1:	defs 5
ZXBASIC_VAR_f2:	defs 5
ZXBASIC_VAR_f3:	defs 5
ZXBASIC_VAR_ff1:	defs 5
ZXBASIC_VAR_fn_t_a:	dw 0
ZXBASIC_VAR_fn_t_b:	dw 0
ZXBASIC_VAR_fn_u_a:	dw 0
ZXBASIC_VAR_fn_u_b:	dw 0
ZXBASIC_VAR_for_f:	defs 5
ZXBASIC_VAR_for_f_step:	defs 5
ZXBASIC_VAR_for_i:	dw 0
ZXBASIC_VAR_for_i_step:	dw 0
ZXBASIC_VAR_for_j:	dw 0
ZXBASIC_VAR_for_l:	dw 0
ZXBASIC_VAR_for_p:	dw 0
ZXBASIC_VAR_for_x:	dw 0
ZXBASIC_VAR_i:	dw 0
ZXBASIC_VAR_i1:	dw 0
ZXBASIC_VAR_i2:	dw 0
ZXBASIC_VAR_ix:	dw 0
ZXBASIC_VAR_j:	dw 0
ZXBASIC_VAR_k:	dw 0
ZXBASIC_VAR_l:	dw 0
ZXBASIC_VAR_min:	dw 0
ZXBASIC_VAR_mx:	dw 0
ZXBASIC_VAR_my:	dw 0
ZXBASIC_VAR_n_string:	dw 0
ZXBASIC_VAR_nf:	defs 5
ZXBASIC_VAR_p:	dw 0
ZXBASIC_VAR_pi:	dw 0
ZXBASIC_VAR_pos:	dw 0
ZXBASIC_VAR_sec:	defs 5
ZXBASIC_VAR_t_string:	dw 0
ZXBASIC_VAR_ticks:	dw 0
ZXBASIC_VAR_time:	dw 0
ZXBASIC_VAR_timestart:	dw 0
ZXBASIC_VAR_tsec:	dw 0
ZXBASIC_VAR_x:	dw 0
ZXBASIC_VAR_x_string:	dw 0
ZXBASIC_VAR_xf:	defs 5
ZXBASIC_VAR_y:	dw 0
ZXBASIC_VAR_y_string:	dw 0
ZXBASIC_VAR_yf:	defs 5
ZXBASIC_VAR_z:	dw 0
ZXBASIC_VAR_z1:	defs 5
ZXBASIC_VAR_zf:	defs 5
ZXBASIC_VAR_zi:	defs 5
ZXBASIC_VAR_zt:	defs 5
ZXBASIC_VAR_zz:	dw 0
FLOAT_1:	db $87, $76, $cc, $cc, $cd	;123.4
FLOAT_10:	db $7d, $4c, $cc, $cc, $cc	;0.1
FLOAT_11:	db $7f, $7f, $ff, $ff, $ff	;0.5
FLOAT_12:	db $80, $40, $00, $00, $00	;0.75
FLOAT_13:	db $7e, $7f, $ff, $ff, $ff	;0.25
FLOAT_14:	db $00, $00, $ff, $00, $00	;255.0
FLOAT_15:	db $00, $00, $96, $00, $00	;150.0
FLOAT_16:	db $81, $19, $99, $99, $9a	;1.2
FLOAT_17:	db $82, $13, $33, $33, $33	;2.3
FLOAT_2:	db $82, $48, $f5, $c2, $8f	;3.14
FLOAT_3:	db $00, $00, $05, $00, $00	;5.0
FLOAT_4:	db $00, $00, $0a, $00, $00	;10.0
FLOAT_5:	db $00, $00, $00, $00, $00	;0.0
FLOAT_6:	db $00, $00, $02, $00, $00	;2.0
FLOAT_7:	db $00, $00, $01, $00, $00	;1.0
FLOAT_8:	db $00, $00, $e8, $03, $00	;1000.0
FLOAT_9:	db $7a, $7f, $97, $24, $74	;0.0156
STRING_0:	dw 4
	db	"1234"
STRING_1:	dw 5
	db	"Hallo"
STRING_10:	dw 11
	db	" 5 Mult+Div"
STRING_100:	dw 1
	db	"-"
STRING_101:	dw 18
	db	"Vergleiche Strings"
STRING_102:	dw 1
	db	"d"
STRING_103:	dw 1
	db	"a"
STRING_104:	dw 3
	db	"abc"
STRING_105:	dw 2
	db	"ab"
STRING_106:	dw 7
	db	"--- x$="
STRING_107:	dw 4
	db	" y$="
STRING_108:	dw 10
	db	"Funktionen"
STRING_109:	dw 35
	db	$ce, "t(a,b)=a+b:", $ce, "u(a,b)=", $a8, "t(a,a)+", $a8, "t(b,b)"
STRING_11:	dw 10
	db	" 6 Strings"
STRING_110:	dw 8
	db	$a8, "u(2,2)="
STRING_111:	dw 8
	db	$a8, "u(3,3)="
STRING_112:	dw 8
	db	$a8, "t(2,3)="
STRING_12:	dw 8
	db	" 7 Float"
STRING_13:	dw 10
	db	" 8 SIN/COS"
STRING_14:	dw 13
	db	" 9 Mandelbrot"
STRING_15:	dw 14
	db	" 0 FOR TO STEP"
STRING_16:	dw 8
	db	" A Input"
STRING_17:	dw 18
	db	" B String to Float"
STRING_18:	dw 18
	db	" C Beep and Border"
STRING_19:	dw 6
	db	" D RND"
STRING_2:	dw 19
	db	"Scroll in Assembler"
STRING_20:	dw 13
	db	" E Vergleiche"
STRING_21:	dw 9
	db	" F DEF FN"
STRING_22:	dw 10
	db	"H Heapwalk"
STRING_23:	dw 2
	db	"  "
STRING_24:	dw 19
	db	"Zeichne 5000 Punkte"
STRING_25:	dw 13
	db	"Screen Scroll"
STRING_26:	dw 8
	db	"in Basic"
STRING_27:	dw 1
	db	"e"
STRING_28:	dw 1
	db	"E"
STRING_29:	dw 1
	db	"f"
STRING_3:	dw 1
	db	"A"
STRING_30:	dw 1
	db	"F"
STRING_31:	dw 22
	db	"Weiter mit Tastendruck"
STRING_32:	dw 7
	db	" ticks "
STRING_33:	dw 1
	db	":"
STRING_34:	dw 12
	db	" Press a key"
STRING_35:	dw 1
	db	" "
STRING_36:	dw 6
	db	"Zeile "
STRING_37:	dw 26
	db	"Multiplizieren, Dividieren"
STRING_38:	dw 2
	db	"x*"
STRING_39:	dw 1
	db	"="
STRING_4:	dw 7
	db	"UDG:", $90, $91, $92
STRING_40:	dw 15
	db	"Mult/Div signed"
STRING_41:	dw 3
	db	"a$="
STRING_42:	dw 7
	db	"val a$="
STRING_43:	dw 6
	db	"start="
STRING_44:	dw 5
	db	"ende="
STRING_45:	dw 6
	db	"mitte="
STRING_46:	dw 7
	db	"2.Byte="
STRING_47:	dw 0
STRING_48:	dw 28
	db	"test float und float mit int"
STRING_49:	dw 3
	db	"pi="
STRING_5:	dw 4
	db	"Menu"
STRING_50:	dw 7
	db	"var pi="
STRING_51:	dw 3
	db	"zz="
STRING_52:	dw 3
	db	"f1="
STRING_53:	dw 4
	db	" f2="
STRING_54:	dw 3
	db	"i1="
STRING_55:	dw 4
	db	" i2="
STRING_56:	dw 6
	db	"f1/f2="
STRING_57:	dw 6
	db	"10-f3="
STRING_58:	dw 6
	db	"f3-10="
STRING_59:	dw 7
	db	"STKBOT="
STRING_6:	dw 7
	db	" 1 Plot"
STRING_60:	dw 7
	db	"STKEND="
STRING_61:	dw 11
	db	"SIN und COS"
STRING_62:	dw 10
	db	"Mandelbrot"
STRING_63:	dw 2
	db	"x="
STRING_64:	dw 4
	db	"    "
STRING_65:	dw 5
	db	"time="
STRING_66:	dw 11
	db	"FOR .. STEP"
STRING_67:	dw 7
	db	"Integer"
STRING_68:	dw 2
	db	", "
STRING_69:	dw 11
	db	"for mit int"
STRING_7:	dw 13
	db	" 2 Array Test"
STRING_70:	dw 15
	db	"for int step -1"
STRING_71:	dw 32
	db	"for int. fp param convert to int"
STRING_72:	dw 10
	db	"for mit fp"
STRING_73:	dw 11
	db	"for fp step"
STRING_74:	dw 15
	db	"Eingabe Integer"
STRING_75:	dw 3
	db	" x="
STRING_76:	dw 23
	db	"Ausgabe int Eingabe int"
STRING_77:	dw 3
	db	" y="
STRING_78:	dw 14
	db	"Eingabe String"
STRING_79:	dw 5
	db	"text:"
STRING_8:	dw 18
	db	" 3 Scroll in Basic"
STRING_80:	dw 6
	db	" name="
STRING_81:	dw 13
	db	"Eingabe Float"
STRING_82:	dw 2
	db	"y="
STRING_83:	dw 3
	db	"t$="
STRING_84:	dw 3
	db	"n$="
STRING_85:	dw 15
	db	"string to float"
STRING_86:	dw 7
	db	"123.456"
STRING_87:	dw 3
	db	" = "
STRING_88:	dw 15
	db	"beep and border"
STRING_89:	dw 17
	db	"rnd and randomize"
STRING_9:	dw 11
	db	" 4 Data+UDG"
STRING_90:	dw 17
	db	"Vergleiche: float"
STRING_91:	dw 4
	db	" f3="
STRING_92:	dw 15
	db	"-------  f1-f2="
STRING_93:	dw 2
	db	"ja"
STRING_94:	dw 1
	db	$c9
STRING_95:	dw 1
	db	$c7
STRING_96:	dw 1
	db	$c8
STRING_97:	dw 1
	db	"<"
STRING_98:	dw 1
	db	">"
STRING_99:	dw 5
	db	"---- "
DATAPTR:	DW 0
DATA_3000:
	dw 24
	dw 60
	dw 126
	dw 219
	dw 255
	dw 36
	dw 90
	dw 165
DATA_3010:
	dw 60
	dw 66
	dw 102
	dw 153
	dw 129
	dw 90
	dw 66
	dw 60
DATA_3020:
	dw 0
	dw 0
	dw 255
	dw 153
	dw 255
	dw 129
	dw 255
	dw 36


    DISPLAY "Compiled Basic = ", /D, $-CBASIC_START,  " bytes"
