package zxcompiler;

import java.util.HashSet;
import java.util.Set;
import java.util.TreeMap;

public class ZXToken {
	public TreeMap<Integer, String> mMapTokens = new TreeMap<>();
	public TreeMap<String, Integer> mMapRTokens = new TreeMap<>();
	public static final int ZX_PRINT = 0XF5;
	public static final int ZX_STOP = 0XE2;
	public static final int SPECTRUM = 0XA3;
	public static final int ZXB_PLAY = 0XA4;
	public static final int ZXB_RND = 0XA5;
	public static final int ZXB_INKEY = 0XA6;
	public static final int ZXB_PI = 0XA7;
	public static final int ZXB_FN = 0XA8;
	public static final int ZXB_POINT = 0XA9;
	public static final int ZXB_SCREEN = 0XAA;
	public static final int ZXB_ATTR = 0XAB;
	public static final int ZXB_AT = 0XAC;
	public static final int ZXB_TAB = 0XAD;
	public static final int ZXB_VALS = 0XAE;
	public static final int ZXB_CODE = 0XAF;
	public static final int ZXB_VAL = 0XB0;
	public static final int ZXB_LEN = 0XB1;
	public static final int ZXB_SIN = 0XB2;
	public static final int ZXB_COS = 0XB3;
	public static final int ZXB_TAN = 0XB4;
	public static final int ZXB_ASN = 0XB5;
	public static final int ZXB_ACS = 0XB6;
	public static final int ZXB_ATN = 0XB7;
	public static final int ZXB_LN = 0XB8;
	public static final int ZXB_EXP = 0XB9;
	public static final int ZXB_INT = 0XBA;
	public static final int ZXB_SQR = 0XBB;
	public static final int ZXB_SGN = 0XBC;
	public static final int ZXB_ABSX = 0XBD;
	public static final int ZXB_PEEK = 0XBE;
	public static final int ZXB_IN = 0XBF;
	public static final int ZXB_USR = 0XC0;
	public static final int ZXB_STR = 0XC1;
	public static final int ZXB_CHR = 0XC2;
	public static final int ZXB_NOTX = 0XC3;
	public static final int ZXB_BIN = 0XC4;
	public static final int ZXB_ORX = 0XC5;
	public static final int ZXB_ANDX = 0XC6;
	public static final int ZXB_LINE = 0XCA;
	public static final int ZXB_THEN = 0XCB;
	public static final int ZXB_TO = 0XCC;
	public static final int ZXB_STEP = 0XCD;
	public static final int ZXB_DEFFN = 0XCE;
	public static final int ZXB_CAT = 0XCF;
	public static final int ZXB_FORMAT = 0XD0;
	public static final int ZXB_MOVE = 0XD1;
	public static final int ZXB_ERASE = 0XD2;
	public static final int ZXB_OPEN = 0XD3;
	public static final int ZXB_CLOSE = 0XD4;
	public static final int ZXB_MERGE = 0XD5;
	public static final int ZXB_VERIFY = 0XD6;
	public static final int ZXB_BEEP = 0XD7;
	public static final int ZXB_CIRCLE = 0XD8;
	public static final int ZXB_INK = 0XD9;
	public static final int ZXB_PAPER = 0XDA;
	public static final int ZXB_FLASH = 0XDB;
	public static final int ZXB_BRIGHT = 0XDC;
	public static final int ZXB_INVERSE = 0XDD;
	public static final int ZXB_OVER = 0XDE;
	public static final int ZXB_OUT = 0XDF;
	public static final int ZXB_LPRINT = 0XE0;
	public static final int ZXB_LLIST = 0XE1;
	public static final int ZXB_STOP = 0XE2;
	public static final int ZXB_READ = 0XE3;
	public static final int ZXB_DATA = 0XE4;
	public static final int ZXB_RESTORE = 0XE5;
	public static final int ZXB_NEW = 0XE6;
	public static final int ZXB_BORDER = 0XE7;
	public static final int ZXB_CONT = 0XE8;
	public static final int ZXB_CONTINUE = 0XE8;
	public static final int ZXB_DIM = 0XE9;
	public static final int ZXB_REM = 0XEA;
	public static final int ZXB_FOR = 0XEB;
	public static final int ZXB_GOSUB = 0XED;
	public static final int ZXB_INPUT = 0XEE;
	public static final int ZXB_LOAD = 0XEF;
	public static final int ZXB_LIST = 0XF0;
	public static final int ZXB_LET = 0XF1;
	public static final int ZXB_PAUSE = 0XF2;
	public static final int ZXB_NEXT = 0XF3;
	public static final int ZXB_POKE = 0XF4;
	public static final int ZXB_PRINT = 0XF5;
	public static final int ZXB_PLOT = 0XF6;
	public static final int ZXB_RUN = 0XF7;
	public static final int ZXB_SAVE = 0XF8;
	public static final int ZXB_RAND = 0XF9;
	public static final int ZXB_RANDOMIZE = 0XF9;
	public static final int ZXB_IF = 0XFA;
	public static final int ZXB_CLS = 0XFB;
	public static final int ZXB_DRAW = 0XFC;
	public static final int ZXB_CLEAR = 0XFD;
	public static final int ZXB_RETURN = 0XFE;
	public static final int ZXB_COPY = 0XFF;
	public static final int ZXB_GOTO = 0XEC;
	public static final int ZXB_SMALLERTHAN = 0xc7;
	public static final int ZXB_BIGGERTHAN = 0xc8;
	public static final int ZXB_UNEQUAL = 0xc9;
	public static final int ZXB_ENDOFCODE = 0x80;
	
	public static final int ZXB_CALL 		= 1000;
	public static final int ZXB_PROC 		= 1001;
	public static final int ZXB_FUNC 		= 1002;
	public static final int ZXB_WHILE 		= 1003;
	public static final int ZXB_WEND 		= 1004;
	public static final int ZXB_EXIT 		= 1005;
	public static final int ZXB_END 		= 1006;
	public static final int ZXB_DO 			= 1007;
	public static final int ZXB_LOOP 		= 1008;
	public static final int ZXB_UNTIL 		= 1009;
	public static final int ZXB_SELECT 		= 1010;
	public static final int ZXB_CASE 		= 1011;
	public static final int ZXB_DEFAULT 	= 1012;
	public static final int ZXB_BREAK	 	= 1013;
	public static final int ZXB_VAR 		= 1014;
	
	public String tokenToStr(int token) {
		String s = mMapTokens.get(token);
		if (s != null) return s;
		return "";
	}
	
	static ZXToken gzxtoken = null;
	public static ZXToken instance() {
		if (gzxtoken != null) return gzxtoken;
		gzxtoken = new ZXToken();
		return gzxtoken;
	}

	public ZXToken() {
		addToken(ZXB_GOTO, "GOTO");
		addToken(ZXB_CLEAR, "CLEAR");
		addToken(ZXB_VAL, "VAL");
		addToken(ZXB_INPUT, "INPUT");
		addToken(ZXB_LET, "LET");
		addToken(ZXB_LOAD, "LOAD");
		addToken(ZXB_CODE, "CODE");
		addToken(ZXB_RANDOMIZE, "RANDOMIZE");
		addToken(ZXB_USR, "USR");
		addToken(ZX_PRINT, "RINT");
		addToken(ZX_STOP, "TOP");
		addToken(SPECTRUM, "TRUM");
		addToken(ZXB_PLAY, "PLAY");
		addToken(ZXB_RND, "RND");
		addToken(ZXB_INKEY, "INKEY$");
		addToken(ZXB_PI, "PI");
		addToken(ZXB_FN, "FN");
		addToken(ZXB_POINT, "POINT");
		addToken(ZXB_SCREEN, "SCREEN");
		addToken(ZXB_ATTR, "ATTR");
		addToken(ZXB_AT, "AT");
		addToken(ZXB_TAB, "TAB");
		addToken(ZXB_VALS, "VALS");
		addToken(ZXB_CODE, "CODE");
		addToken(ZXB_VAL, "VAL");
		addToken(ZXB_LEN, "LEN");
		addToken(ZXB_SIN, "SIN");
		addToken(ZXB_COS, "COS");
		addToken(ZXB_TAN, "TAN");
		addToken(ZXB_ASN, "ASN");
		addToken(ZXB_ACS, "ACS");
		addToken(ZXB_ATN, "ATN");
		addToken(ZXB_LN, "LN");
		addToken(ZXB_EXP, "EXP");
		addToken(ZXB_INT, "INT");
		addToken(ZXB_SQR, "SQR");
		addToken(ZXB_SGN, "SGN");
		addToken(ZXB_ABSX, "ABSX");
		addToken(ZXB_PEEK, "PEEK");
		addToken(ZXB_IN, "IN");
		addToken(ZXB_USR, "USR");
		addToken(ZXB_STR, "STR");
		addToken(ZXB_CHR, "CHR$");
		addToken(ZXB_NOTX, "NOT");
		addToken(ZXB_BIN, "BIN");
		addToken(ZXB_ORX, "OR");
		addToken(ZXB_ANDX, "AND");
		addToken(ZXB_LINE, "LINE");
		addToken(ZXB_THEN, "THEN");
		addToken(ZXB_TO, "TO");
		addToken(ZXB_STEP, "STEP");
		addToken(ZXB_DEFFN, "DEFFN");
		addToken(ZXB_CAT, "CAT");
		addToken(ZXB_FORMAT, "FORMAT");
		addToken(ZXB_MOVE, "MOVE");
		addToken(ZXB_ERASE, "ERASE");
		addToken(ZXB_OPEN, "OPEN");
		addToken(ZXB_CLOSE, "CLOSE");
		addToken(ZXB_MERGE, "MERGE");
		addToken(ZXB_VERIFY, "VERIFY");
		addToken(ZXB_BEEP, "BEEP");
		addToken(ZXB_CIRCLE, "CIRCLE");
		addToken(ZXB_INK, "INK");
		addToken(ZXB_PAPER, "PAPER");
		addToken(ZXB_FLASH, "FLASH");
		addToken(ZXB_BRIGHT, "BRIGHT");
		addToken(ZXB_INVERSE, "INVERSE");
		addToken(ZXB_OVER, "OVER");
		addToken(ZXB_OUT, "OUT");
		addToken(ZXB_LPRINT, "LPRINT");
		addToken(ZXB_LLIST, "LLIST");
		addToken(ZXB_STOP, "STOP");
		addToken(ZXB_READ, "READ");
		addToken(ZXB_DATA, "DATA");
		addToken(ZXB_RESTORE, "RESTORE");
		addToken(ZXB_NEW, "NEW");
		addToken(ZXB_BORDER, "BORDER");
		addToken(ZXB_CONT, "CONT");
		addToken(ZXB_CONTINUE, "CONTINUE");
		addToken(ZXB_DIM, "DIM");
		addToken(ZXB_REM, "REM");
		addToken(ZXB_FOR, "FOR");
		addToken(ZXB_GOTO, "GOTO");
		addToken(ZXB_GOSUB, "GOSUB");
		addToken(ZXB_GOTO, "GO TO");
		addToken(ZXB_GOSUB, "GO SUB");
		addToken(ZXB_INPUT, "INPUT");
		addToken(ZXB_LOAD, "LOAD");
		addToken(ZXB_LIST, "LIST");
		addToken(ZXB_LET, "LET");
		addToken(ZXB_PAUSE, "PAUSE");
		addToken(ZXB_NEXT, "NEXT");
		addToken(ZXB_POKE, "POKE");
		addToken(ZXB_PRINT, "PRINT");
		addToken(ZXB_PLOT, "PLOT");
		addToken(ZXB_RUN, "RUN");
		addToken(ZXB_SAVE, "SAVE");
		addToken(ZXB_RAND, "RAND");
		addToken(ZXB_RANDOMIZE, "RANDOMIZE");
		addToken(ZXB_IF, "IF");
		addToken(ZXB_CLS, "CLS");
		addToken(ZXB_DRAW, "DRAW");
		addToken(ZXB_CLEAR, "CLEAR");
		addToken(ZXB_RETURN, "RETURN");
		addToken(ZXB_COPY, "COPY");
		addToken(ZXB_GOTO, "GOTO");
		addToken(ZXB_SMALLERTHAN, "<=");
		addToken(ZXB_BIGGERTHAN, ">=");
		addToken(ZXB_UNEQUAL, "<>");

	}
	
	public void addToken(int token, String name) {
		Integer key = Integer.valueOf(token);
		mMapTokens.put(key, name);
		mMapRTokens.put(name, key);
	}
	
	public void addExtendTokens() {
		addToken(ZXB_CALL,"CALL");
		addToken(ZXB_PROC,"PROC");
		addToken(ZXB_PROC,"SUB");
		addToken(ZXB_PROC,"PROCEDURE");
		addToken(ZXB_FUNC,"FUNC");
		addToken(ZXB_WHILE,"WHILE");
		addToken(ZXB_WEND,"WEND");
		addToken(ZXB_EXIT,"EXIT");
		addToken(ZXB_END,"END");
		addToken(ZXB_DO,"DO");
		addToken(ZXB_LOOP,"LOOP");
		addToken(ZXB_UNTIL,"UNTIL");
		addToken(ZXB_SELECT,"SELECT");
		addToken(ZXB_CASE,"CASE");
		addToken(ZXB_DEFAULT,"DEFAULT");
		addToken(ZXB_BREAK,"BREAK");
		addToken(ZXB_VAR, "VAR");
	}

	public Set<String> createExtendedSet(String[] strings) {
		addExtendTokens();
		HashSet<String> result = new HashSet<String>();
		if (strings != null) for (String s:strings) result.add(s);
		for (String s:mMapRTokens.keySet()) result.add(s);
		return result;
	}
	public Set<String> createSet(String[] strings) {
		HashSet<String> result = new HashSet<String>();
		for (String s:mMapRTokens.keySet()) result.add(s);
		if (strings != null)
		for (String s:strings) result.add(s);
		return result;
	}
}
